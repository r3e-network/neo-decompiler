{"$message_type":"diagnostic","message":"variant `JMP_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1050,"byte_end":1055,"line_start":57,"line_end":57,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    JMP_L,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_camel_case_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1050,"byte_end":1055,"line_start":57,"line_end":57,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    JMP_L,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":"JmpL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMP_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMP_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpL`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_camel_case_types)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `JMPIF_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1072,"byte_end":1079,"line_start":59,"line_end":59,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPIF_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1072,"byte_end":1079,"line_start":59,"line_end":59,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPIF_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":"JmpifL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMPIF_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:59:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMPIF_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpifL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `JMPIFNOT_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1099,"byte_end":1109,"line_start":61,"line_end":61,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    JMPIFNOT_L,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1099,"byte_end":1109,"line_start":61,"line_end":61,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    JMPIFNOT_L,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"JmpifnotL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMPIFNOT_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:61:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMPIFNOT_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpifnotL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `JMPEQ_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1126,"byte_end":1133,"line_start":63,"line_end":63,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPEQ_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1126,"byte_end":1133,"line_start":63,"line_end":63,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPEQ_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":"JmpeqL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMPEQ_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:63:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMPEQ_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpeqL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `JMPNE_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1150,"byte_end":1157,"line_start":65,"line_end":65,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPNE_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1150,"byte_end":1157,"line_start":65,"line_end":65,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPNE_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":"JmpneL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMPNE_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:65:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMPNE_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpneL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `JMPGT_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1174,"byte_end":1181,"line_start":67,"line_end":67,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPGT_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1174,"byte_end":1181,"line_start":67,"line_end":67,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPGT_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":"JmpgtL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMPGT_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:67:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMPGT_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpgtL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `JMPGE_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1198,"byte_end":1205,"line_start":69,"line_end":69,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPGE_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1198,"byte_end":1205,"line_start":69,"line_end":69,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPGE_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":"JmpgeL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMPGE_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:69:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMPGE_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpgeL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `JMPLT_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1222,"byte_end":1229,"line_start":71,"line_end":71,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPLT_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1222,"byte_end":1229,"line_start":71,"line_end":71,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPLT_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":"JmpltL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMPLT_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:71:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMPLT_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpltL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `JMPLE_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1246,"byte_end":1253,"line_start":73,"line_end":73,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPLE_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1246,"byte_end":1253,"line_start":73,"line_end":73,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    JMPLE_L,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":"JmpleL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `JMPLE_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:73:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    JMPLE_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `JmpleL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `CALL_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1269,"byte_end":1275,"line_start":75,"line_end":75,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    CALL_L,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1269,"byte_end":1275,"line_start":75,"line_end":75,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    CALL_L,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"CallL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `CALL_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:75:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CALL_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `CallL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `TRY_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1346,"byte_end":1351,"line_start":82,"line_end":82,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    TRY_L,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1346,"byte_end":1351,"line_start":82,"line_end":82,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    TRY_L,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":"TryL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `TRY_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:82:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    TRY_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `TryL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `ENDTRY_L` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":1369,"byte_end":1377,"line_start":84,"line_end":84,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    ENDTRY_L,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":1369,"byte_end":1377,"line_start":84,"line_end":84,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    ENDTRY_L,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":"EndtryL","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `ENDTRY_L` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:84:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ENDTRY_L,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `EndtryL`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_07` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2694,"byte_end":2704,"line_start":194,"line_end":194,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_07,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2694,"byte_end":2704,"line_start":194,"line_end":194,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_07,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"Unknown07","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_07` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:194:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_07,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `Unknown07`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_42` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2710,"byte_end":2720,"line_start":195,"line_end":195,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_42,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2710,"byte_end":2720,"line_start":195,"line_end":195,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_42,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"Unknown42","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_42` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:195:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_42,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `Unknown42`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_44` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2726,"byte_end":2736,"line_start":196,"line_end":196,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_44,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2726,"byte_end":2736,"line_start":196,"line_end":196,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_44,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"Unknown44","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_44` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:196:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_44,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `Unknown44`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_B6` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2742,"byte_end":2752,"line_start":197,"line_end":197,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_B6,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2742,"byte_end":2752,"line_start":197,"line_end":197,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_B6,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownB6","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_B6` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:197:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_B6,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownB6`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_B7` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2758,"byte_end":2768,"line_start":198,"line_end":198,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_B7,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2758,"byte_end":2768,"line_start":198,"line_end":198,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_B7,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownB7","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_B7` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:198:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_B7,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownB7`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_B8` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2774,"byte_end":2784,"line_start":199,"line_end":199,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_B8,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2774,"byte_end":2784,"line_start":199,"line_end":199,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_B8,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownB8","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_B8` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:199:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_B8,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownB8`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_BB` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2790,"byte_end":2800,"line_start":200,"line_end":200,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_BB,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2790,"byte_end":2800,"line_start":200,"line_end":200,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_BB,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownBb","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_BB` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:200:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_BB,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownBb`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_94` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2806,"byte_end":2816,"line_start":201,"line_end":201,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_94,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2806,"byte_end":2816,"line_start":201,"line_end":201,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_94,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"Unknown94","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_94` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:201:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_94,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `Unknown94`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_DA` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2822,"byte_end":2832,"line_start":202,"line_end":202,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_DA,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2822,"byte_end":2832,"line_start":202,"line_end":202,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_DA,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownDa","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_DA` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:202:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_DA,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownDa`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_E4` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2838,"byte_end":2848,"line_start":203,"line_end":203,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_E4,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2838,"byte_end":2848,"line_start":203,"line_end":203,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_E4,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownE4","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_E4` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:203:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_E4,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownE4`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_E6` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2854,"byte_end":2864,"line_start":204,"line_end":204,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_E6,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2854,"byte_end":2864,"line_start":204,"line_end":204,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_E6,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownE6","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_E6` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:204:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_E6,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownE6`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_E8` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2870,"byte_end":2880,"line_start":205,"line_end":205,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_E8,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2870,"byte_end":2880,"line_start":205,"line_end":205,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_E8,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownE8","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_E8` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:205:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_E8,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownE8`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_E9` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2886,"byte_end":2896,"line_start":206,"line_end":206,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_E9,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2886,"byte_end":2896,"line_start":206,"line_end":206,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_E9,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownE9","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_E9` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:206:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_E9,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownE9`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_EA` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2902,"byte_end":2912,"line_start":207,"line_end":207,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_EA,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2902,"byte_end":2912,"line_start":207,"line_end":207,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_EA,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownEa","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_EA` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:207:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_EA,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownEa`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_EC` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2918,"byte_end":2928,"line_start":208,"line_end":208,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_EC,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2918,"byte_end":2928,"line_start":208,"line_end":208,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_EC,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownEc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_EC` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:208:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_EC,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownEc`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_EF` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2934,"byte_end":2944,"line_start":209,"line_end":209,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_EF,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2934,"byte_end":2944,"line_start":209,"line_end":209,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_EF,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownEf","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_EF` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:209:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_EF,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownEf`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_F0` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2950,"byte_end":2960,"line_start":210,"line_end":210,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_F0,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2950,"byte_end":2960,"line_start":210,"line_end":210,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_F0,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownF0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_F0` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:210:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_F0,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownF0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_F2` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2966,"byte_end":2976,"line_start":211,"line_end":211,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_F2,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2966,"byte_end":2976,"line_start":211,"line_end":211,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_F2,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownF2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_F2` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:211:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_F2,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownF2`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_F7` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2982,"byte_end":2992,"line_start":212,"line_end":212,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_F7,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2982,"byte_end":2992,"line_start":212,"line_end":212,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_F7,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownF7","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_F7` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:212:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_F7,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownF7`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `UNKNOWN_FF` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/common/types.rs","byte_start":2998,"byte_end":3008,"line_start":213,"line_end":213,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_FF,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/common/types.rs","byte_start":2998,"byte_end":3008,"line_start":213,"line_end":213,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    UNKNOWN_FF,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"UnknownFf","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `UNKNOWN_FF` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/types.rs:213:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UNKNOWN_FF,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `UnknownFf`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::fmt::Write`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":562,"byte_end":577,"line_start":14,"line_end":14,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use std::fmt::Write;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fmt::Write`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fmt::Write;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `loop_idx`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":28972,"byte_end":28980,"line_start":864,"line_end":864,"column_start":14,"column_end":22,"is_primary":true,"text":[{"text":"        for (loop_idx, loop_info) in loops.iter().enumerate() {","highlight_start":14,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":28972,"byte_end":28980,"line_start":864,"line_end":864,"column_start":14,"column_end":22,"is_primary":true,"text":[{"text":"        for (loop_idx, loop_info) in loops.iter().enumerate() {","highlight_start":14,"highlight_end":22}],"label":null,"suggested_replacement":"_loop_idx","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `loop_idx`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/cfg.rs:864:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m864\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (loop_idx, loop_info) in loops.iter().enumerate() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_loop_idx`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `arguments`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":57656,"byte_end":57665,"line_start":1553,"line_end":1553,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        arguments: &[Expression],","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":57656,"byte_end":57665,"line_start":1553,"line_end":1553,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        arguments: &[Expression],","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":"_arguments","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `arguments`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1553:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1553\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        arguments: &[Expression],\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_arguments`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `true_target`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":13143,"byte_end":13154,"line_start":353,"line_end":353,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"                true_target,","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":13143,"byte_end":13154,"line_start":353,"line_end":353,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"                true_target,","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":"true_target: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `true_target`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:353:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                true_target,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `true_target: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `false_target`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":13172,"byte_end":13184,"line_start":354,"line_end":354,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"                false_target,","highlight_start":17,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":13172,"byte_end":13184,"line_start":354,"line_end":354,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"                false_target,","highlight_start":17,"highlight_end":29}],"label":null,"suggested_replacement":"false_target: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `false_target`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:354:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m354\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                false_target,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `false_target: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `function`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":32074,"byte_end":32082,"line_start":799,"line_end":799,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        function: &IRFunction,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":32074,"byte_end":32082,"line_start":799,"line_end":799,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        function: &IRFunction,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"_function","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `function`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:799:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m799\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        function: &IRFunction,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_function`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `e`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/common/config.rs","byte_start":6548,"byte_end":6549,"line_start":256,"line_end":256,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"        let content = std::fs::read_to_string(path).map_err(|e| ConfigError::FileNotFound {","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/common/config.rs","byte_start":6548,"byte_end":6549,"line_start":256,"line_end":256,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"        let content = std::fs::read_to_string(path).map_err(|e| ConfigError::FileNotFound {","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `e`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/config.rs:256:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let content = std::fs::read_to_string(path).map_err(|e| ConfigError::FileNotFound {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_e`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `e`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/common/config.rs","byte_start":7847,"byte_end":7848,"line_start":296,"line_end":296,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"            for entry in std::fs::read_dir(path).map_err(|e| ConfigError::FileNotFound {","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/common/config.rs","byte_start":7847,"byte_end":7848,"line_start":296,"line_end":296,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"            for entry in std::fs::read_dir(path).map_err(|e| ConfigError::FileNotFound {","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `e`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/config.rs:296:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            for entry in std::fs::read_dir(path).map_err(|e| ConfigError::FileNotFound {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_e`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `e`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/common/config.rs","byte_start":8305,"byte_end":8306,"line_start":305,"line_end":305,"column_start":65,"column_end":66,"is_primary":true,"text":[{"text":"                        std::fs::read_to_string(&path).map_err(|e| ConfigError::FileNotFound {","highlight_start":65,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/common/config.rs","byte_start":8305,"byte_end":8306,"line_start":305,"line_end":305,"column_start":65,"column_end":66,"is_primary":true,"text":[{"text":"                        std::fs::read_to_string(&path).map_err(|e| ConfigError::FileNotFound {","highlight_start":65,"highlight_end":66}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `e`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/config.rs:305:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        std::fs::read_to_string(&path).map_err(|e| ConfigError::FileNotFound {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_e`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `return_type`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":27222,"byte_end":27233,"line_start":767,"line_end":767,"column_start":21,"column_end":32,"is_primary":true,"text":[{"text":"                let return_type = self.infer_expression_type(context, expr)?;","highlight_start":21,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":27222,"byte_end":27233,"line_start":767,"line_end":767,"column_start":21,"column_end":32,"is_primary":true,"text":[{"text":"                let return_type = self.infer_expression_type(context, expr)?;","highlight_start":21,"highlight_end":32}],"label":null,"suggested_replacement":"_return_type","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `return_type`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:767:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m767\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let return_type = self.infer_expression_type(context, expr)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_return_type`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":40882,"byte_end":40887,"line_start":1125,"line_end":1125,"column_start":29,"column_end":34,"is_primary":true,"text":[{"text":"            (Type::Unknown, other) | (other, Type::Unknown) => {","highlight_start":29,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":40892,"byte_end":40897,"line_start":1125,"line_end":1125,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"            (Type::Unknown, other) | (other, Type::Unknown) => {","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":40882,"byte_end":40887,"line_start":1125,"line_end":1125,"column_start":29,"column_end":34,"is_primary":true,"text":[{"text":"            (Type::Unknown, other) | (other, Type::Unknown) => {","highlight_start":29,"highlight_end":34}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":40892,"byte_end":40897,"line_start":1125,"line_end":1125,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"            (Type::Unknown, other) | (other, Type::Unknown) => {","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1125:29\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Type::Unknown, other) | (other, Type::Unknown) => {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if this is intentional, prefix it with an underscore\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Type::Unknown, \u001b[0m\u001b[0m\u001b[38;5;10m_\u001b[0m\u001b[0mother) | (\u001b[0m\u001b[0m\u001b[38;5;10m_\u001b[0m\u001b[0mother, Type::Unknown) => {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `context`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":41897,"byte_end":41904,"line_start":1156,"line_end":1156,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        context: &mut TypeInferenceContext,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":41897,"byte_end":41904,"line_start":1156,"line_end":1156,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        context: &mut TypeInferenceContext,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"_context","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `context`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1156:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        context: &mut TypeInferenceContext,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_context`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `storage_patterns` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":45415,"byte_end":45431,"line_start":1261,"line_end":1261,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"        let mut storage_patterns = HashMap::new();","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_assignments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `storage_patterns` is never read\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1261:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut storage_patterns = HashMap::new();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_assignments)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `security_risks` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":45466,"byte_end":45480,"line_start":1262,"line_end":1262,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"        let mut security_risks = Vec::new();","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `security_risks` is never read\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1262:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut security_risks = Vec::new();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `right`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":51088,"byte_end":51093,"line_start":1408,"line_end":1408,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"                right,","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try ignoring the field","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":51088,"byte_end":51093,"line_start":1408,"line_end":1408,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"                right,","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":"right: _","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `right`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1408:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                right,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try ignoring the field: `right: _`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `var`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":53609,"byte_end":53612,"line_start":1471,"line_end":1471,"column_start":34,"column_end":37,"is_primary":true,"text":[{"text":"            Expression::Variable(var) => {","highlight_start":34,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":53609,"byte_end":53612,"line_start":1471,"line_end":1471,"column_start":34,"column_end":37,"is_primary":true,"text":[{"text":"            Expression::Variable(var) => {","highlight_start":34,"highlight_end":37}],"label":null,"suggested_replacement":"_var","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `var`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1471:34\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Expression::Variable(var) => {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_var`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `loop_idx`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":60837,"byte_end":60845,"line_start":1667,"line_end":1667,"column_start":14,"column_end":22,"is_primary":true,"text":[{"text":"        for (loop_idx, loop_info) in cfg.loops.iter().enumerate() {","highlight_start":14,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":60837,"byte_end":60845,"line_start":1667,"line_end":1667,"column_start":14,"column_end":22,"is_primary":true,"text":[{"text":"        for (loop_idx, loop_info) in cfg.loops.iter().enumerate() {","highlight_start":14,"highlight_end":22}],"label":null,"suggested_replacement":"_loop_idx","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `loop_idx`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1667:14\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (loop_idx, loop_info) in cfg.loops.iter().enumerate() {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_loop_idx`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `loop_body`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":63093,"byte_end":63102,"line_start":1732,"line_end":1732,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        loop_body: &HashSet<BlockId>,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":63093,"byte_end":63102,"line_start":1732,"line_end":1732,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        loop_body: &HashSet<BlockId>,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":"_loop_body","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `loop_body`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1732:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        loop_body: &HashSet<BlockId>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_loop_body`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `cfg`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":78167,"byte_end":78170,"line_start":2134,"line_end":2134,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"        if let Some(ref cfg) = results.cfg {","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":78167,"byte_end":78170,"line_start":2134,"line_end":2134,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"        if let Some(ref cfg) = results.cfg {","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":"_cfg","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `cfg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:2134:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(ref cfg) = results.cfg {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_cfg`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `boundaries`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/lifter.rs","byte_start":11942,"byte_end":11952,"line_start":315,"line_end":315,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        boundaries: &[u32],","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/lifter.rs","byte_start":11942,"byte_end":11952,"line_start":315,"line_end":315,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        boundaries: &[u32],","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":"_boundaries","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `boundaries`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/lifter.rs:315:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m315\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        boundaries: &[u32],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_boundaries`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `target_block`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/lifter.rs","byte_start":40307,"byte_end":40319,"line_start":948,"line_end":948,"column_start":25,"column_end":37,"is_primary":true,"text":[{"text":"                    let target_block = self","highlight_start":25,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/lifter.rs","byte_start":40307,"byte_end":40319,"line_start":948,"line_end":948,"column_start":25,"column_end":37,"is_primary":true,"text":[{"text":"                    let target_block = self","highlight_start":25,"highlight_end":37}],"label":null,"suggested_replacement":"_target_block","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `target_block`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/lifter.rs:948:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let target_block = self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_target_block`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `var_type`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/lifter.rs","byte_start":44320,"byte_end":44328,"line_start":1059,"line_end":1059,"column_start":40,"column_end":48,"is_primary":true,"text":[{"text":"    fn create_temp_variable(&mut self, var_type: Type) -> Variable {","highlight_start":40,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/lifter.rs","byte_start":44320,"byte_end":44328,"line_start":1059,"line_end":1059,"column_start":40,"column_end":48,"is_primary":true,"text":[{"text":"    fn create_temp_variable(&mut self, var_type: Type) -> Variable {","highlight_start":40,"highlight_end":48}],"label":null,"suggested_replacement":"_var_type","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `var_type`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/lifter.rs:1059:40\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1059\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn create_temp_variable(&mut self, var_type: Type) -> Variable {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_var_type`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `expected_data_size`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/frontend/nef_parser.rs","byte_start":17754,"byte_end":17772,"line_start":549,"line_end":549,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"        let expected_data_size = header_size + tokens_size + self.bytecode.len();","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/frontend/nef_parser.rs","byte_start":17754,"byte_end":17772,"line_start":549,"line_end":549,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"        let expected_data_size = header_size + tokens_size + self.bytecode.len();","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":"_expected_data_size","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `expected_data_size`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/frontend/nef_parser.rs:549:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let expected_data_size = header_size + tokens_size + self.bytecode.len();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_expected_data_size`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `nef_file_parsed`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":16128,"byte_end":16143,"line_start":585,"line_end":585,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        let nef_file_parsed = nef_parser.parse(&nef_data)?;","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":16128,"byte_end":16143,"line_start":585,"line_end":585,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        let nef_file_parsed = nef_parser.parse(&nef_data)?;","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":"_nef_file_parsed","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `nef_file_parsed`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:585:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let nef_file_parsed = nef_parser.parse(&nef_data)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_nef_file_parsed`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `show_blocks`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":15732,"byte_end":15743,"line_start":574,"line_end":574,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        show_blocks: bool,","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":15732,"byte_end":15743,"line_start":574,"line_end":574,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        show_blocks: bool,","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":"_show_blocks","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `show_blocks`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:574:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        show_blocks: bool,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_show_blocks`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `show_instructions`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":15759,"byte_end":15776,"line_start":575,"line_end":575,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"        show_instructions: bool,","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":15759,"byte_end":15776,"line_start":575,"line_end":575,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"        show_instructions: bool,","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":"_show_instructions","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `show_instructions`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:575:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        show_instructions: bool,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_show_instructions`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `simplified`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":15792,"byte_end":15802,"line_start":576,"line_end":576,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        simplified: bool,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":15792,"byte_end":15802,"line_start":576,"line_end":576,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        simplified: bool,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":"_simplified","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `simplified`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:576:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        simplified: bool,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_simplified`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `analysis`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":15818,"byte_end":15826,"line_start":577,"line_end":577,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        analysis: bool,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":15818,"byte_end":15826,"line_start":577,"line_end":577,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        analysis: bool,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"_analysis","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `analysis`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:577:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        analysis: bool,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_analysis`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reports`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":18276,"byte_end":18283,"line_start":650,"line_end":650,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        reports: bool,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":18276,"byte_end":18283,"line_start":650,"line_end":650,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        reports: bool,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"_reports","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reports`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:650:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m650\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        reports: bool,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reports`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `nef_data`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":22085,"byte_end":22093,"line_start":749,"line_end":749,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let nef_data = fs::read(nef_file)?;","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":22085,"byte_end":22093,"line_start":749,"line_end":749,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"        let nef_data = fs::read(nef_file)?;","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"_nef_data","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `nef_data`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:749:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m749\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let nef_data = fs::read(nef_file)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_nef_data`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `manifest_json`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":22129,"byte_end":22142,"line_start":750,"line_end":750,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let manifest_json = manifest.map(|p| fs::read_to_string(p)).transpose()?;","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":22129,"byte_end":22142,"line_start":750,"line_end":750,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let manifest_json = manifest.map(|p| fs::read_to_string(p)).transpose()?;","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"_manifest_json","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `manifest_json`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:750:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m750\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let manifest_json = manifest.map(|p| fs::read_to_string(p)).transpose()?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_manifest_json`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `config`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":21595,"byte_end":21601,"line_start":733,"line_end":733,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        config: &DecompilerConfig,","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":21595,"byte_end":21601,"line_start":733,"line_end":733,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        config: &DecompilerConfig,","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"_config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `config`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:733:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        config: &DecompilerConfig,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `threshold`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":21884,"byte_end":21893,"line_start":743,"line_end":743,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        threshold: &Severity,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":21884,"byte_end":21893,"line_start":743,"line_end":743,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        threshold: &Severity,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":"_threshold","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `threshold`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:743:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m743\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        threshold: &Severity,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_threshold`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `config` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1735,"byte_end":1745,"line_start":62,"line_end":62,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct Decompiler {","highlight_start":12,"highlight_end":22}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1752,"byte_end":1758,"line_start":63,"line_end":63,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    config: DecompilerConfig,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `config` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:63:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Decompiler {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config: DecompilerConfig,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `unify_types` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":23836,"byte_end":23860,"line_start":675,"line_end":675,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"impl TypeInferenceEngine {","highlight_start":1,"highlight_end":25}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/analysis/types.rs","byte_start":47943,"byte_end":47954,"line_start":1304,"line_end":1304,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"    fn unify_types(&mut self, types: Vec<Type>) -> Result<Type, TypeError> {","highlight_start":8,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `unify_types` is never used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1304:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m675\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl TypeInferenceEngine {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn unify_types(&mut self, types: Vec<Type>) -> Result<Type, TypeError> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"fields `condition_type`, `true_target`, `false_target`, and `merged_target` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":1353,"byte_end":1371,"line_start":38,"line_end":38,"column_start":8,"column_end":26,"is_primary":false,"text":[{"text":"struct ConditionalContext {","highlight_start":8,"highlight_end":26}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1378,"byte_end":1392,"line_start":39,"line_end":39,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    condition_type: ConditionType,","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1413,"byte_end":1424,"line_start":40,"line_end":40,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"    true_target: BlockId,","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1439,"byte_end":1451,"line_start":41,"line_end":41,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    false_target: Option<BlockId>,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1474,"byte_end":1487,"line_start":42,"line_end":42,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    merged_target: Option<BlockId>,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`ConditionalContext` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: fields `condition_type`, `true_target`, `false_target`, and `merged_target` are never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct ConditionalContext {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfields in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    condition_type: ConditionType,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    true_target: BlockId,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    false_target: Option<BlockId>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    merged_target: Option<BlockId>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `ConditionalContext` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variants `If`, `ElseIf`, `While`, and `Switch` are never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":1585,"byte_end":1598,"line_start":47,"line_end":47,"column_start":6,"column_end":19,"is_primary":false,"text":[{"text":"enum ConditionType {","highlight_start":6,"highlight_end":19}],"label":"variants in this enum","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1605,"byte_end":1607,"line_start":48,"line_end":48,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    If,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1613,"byte_end":1619,"line_start":49,"line_end":49,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    ElseIf,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1625,"byte_end":1630,"line_start":50,"line_end":50,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    While,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1636,"byte_end":1642,"line_start":51,"line_end":51,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Switch,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`ConditionType` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variants `If`, `ElseIf`, `While`, and `Switch` are never constructed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:48:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0menum ConditionType {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvariants in this enum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    If,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ElseIf,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    While,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Switch,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `ConditionType` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods `format_block_start`, `format_block_end`, and `format_type_annotation` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":1702,"byte_end":1717,"line_start":55,"line_end":55,"column_start":7,"column_end":22,"is_primary":false,"text":[{"text":"trait SyntaxFormatter {","highlight_start":7,"highlight_end":22}],"label":"methods in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1865,"byte_end":1883,"line_start":61,"line_end":61,"column_start":8,"column_end":26,"is_primary":true,"text":[{"text":"    fn format_block_start(&self, block_id: BlockId) -> String;","highlight_start":8,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":1928,"byte_end":1944,"line_start":62,"line_end":62,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn format_block_end(&self) -> String;","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":2456,"byte_end":2478,"line_start":74,"line_end":74,"column_start":8,"column_end":30,"is_primary":true,"text":[{"text":"    fn format_type_annotation(&self, var_name: &str, type_name: &str) -> String;","highlight_start":8,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `format_block_start`, `format_block_end`, and `format_type_annotation` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:61:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtrait SyntaxFormatter {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn format_block_start(&self, block_id: BlockId) -> String;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn format_block_end(&self) -> String;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn format_type_annotation(&self, var_name: &str, type_name: &str) -> String;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `config` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/core/disassembler.rs","byte_start":162,"byte_end":174,"line_start":6,"line_end":6,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"pub struct Disassembler {","highlight_start":12,"highlight_end":24}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/disassembler.rs","byte_start":264,"byte_end":270,"line_start":10,"line_end":10,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    config: DecompilerConfig,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `config` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/disassembler.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Disassembler {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config: DecompilerConfig,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `config` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/core/lifter.rs","byte_start":385,"byte_end":393,"line_start":9,"line_end":9,"column_start":12,"column_end":20,"is_primary":false,"text":[{"text":"pub struct IRLifter {","highlight_start":12,"highlight_end":20}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/lifter.rs","byte_start":422,"byte_end":428,"line_start":11,"line_end":11,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    config: DecompilerConfig,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `config` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/lifter.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct IRLifter {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Configuration\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config: DecompilerConfig,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods `build_offset_mapping`, `offset_to_block_id`, `lift_pack_struct`, and `lift_pack_map` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/core/lifter.rs","byte_start":1163,"byte_end":1176,"line_start":34,"line_end":34,"column_start":1,"column_end":14,"is_primary":false,"text":[{"text":"impl IRLifter {","highlight_start":1,"highlight_end":14}],"label":"methods in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/lifter.rs","byte_start":3594,"byte_end":3614,"line_start":110,"line_end":110,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn build_offset_mapping(&mut self, boundaries: &[u32]) {","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/lifter.rs","byte_start":46205,"byte_end":46223,"line_start":1121,"line_end":1121,"column_start":8,"column_end":26,"is_primary":true,"text":[{"text":"    fn offset_to_block_id(&self, current_offset: u32, target_offset: i32) -> BlockId {","highlight_start":8,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/lifter.rs","byte_start":77154,"byte_end":77170,"line_start":2080,"line_end":2080,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn lift_pack_struct(&mut self, instruction: &Instruction) -> Result<Vec<Operation>, LiftError> {","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/lifter.rs","byte_start":77817,"byte_end":77830,"line_start":2099,"line_end":2099,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn lift_pack_map(&mut self, instruction: &Instruction) -> Result<Vec<Operation>, LiftError> {","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `build_offset_mapping`, `offset_to_block_id`, `lift_pack_struct`, and `lift_pack_map` are never used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/lifter.rs:110:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl IRLifter {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn build_offset_mapping(&mut self, boundaries: &[u32]) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn offset_to_block_id(&self, current_offset: u32, target_offset: i32) -> BlockId {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn lift_pack_struct(&mut self, instruction: &Instruction) -> Result<Vec<Operation>, LiftError> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2099\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn lift_pack_map(&mut self, instruction: &Instruction) -> Result<Vec<Operation>, LiftError> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `plugins` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/plugins/mod.rs","byte_start":189,"byte_end":202,"line_start":8,"line_end":8,"column_start":12,"column_end":25,"is_primary":false,"text":[{"text":"pub struct PluginManager {","highlight_start":12,"highlight_end":25}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/plugins/mod.rs","byte_start":232,"byte_end":239,"line_start":10,"line_end":10,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    plugins: HashMap<String, Box<dyn Plugin>>,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `plugins` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/plugins/mod.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PluginManager {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Loaded plugins\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    plugins: HashMap<String, Box<dyn Plugin>>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `or_insert_with` to construct default value","code":{"code":"clippy::unwrap_or_default","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":21667,"byte_end":21691,"line_start":638,"line_end":638,"column_start":18,"column_end":42,"is_primary":true,"text":[{"text":"                .or_insert_with(Vec::new)","highlight_start":18,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::unwrap_or_default)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":21667,"byte_end":21691,"line_start":638,"line_end":638,"column_start":18,"column_end":42,"is_primary":true,"text":[{"text":"                .or_insert_with(Vec::new)","highlight_start":18,"highlight_end":42}],"label":null,"suggested_replacement":"or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `or_insert_with` to construct default value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/cfg.rs:638:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m638\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .or_insert_with(Vec::new)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `or_default()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::unwrap_or_default)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `or_insert_with` to construct default value","code":{"code":"clippy::unwrap_or_default","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":22729,"byte_end":22757,"line_start":669,"line_end":669,"column_start":26,"column_end":54,"is_primary":true,"text":[{"text":"                        .or_insert_with(HashSet::new)","highlight_start":26,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":22729,"byte_end":22757,"line_start":669,"line_end":669,"column_start":26,"column_end":54,"is_primary":true,"text":[{"text":"                        .or_insert_with(HashSet::new)","highlight_start":26,"highlight_end":54}],"label":null,"suggested_replacement":"or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `or_insert_with` to construct default value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/cfg.rs:669:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .or_insert_with(HashSet::new)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `or_default()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many arguments (9/7)","code":{"code":"clippy::too_many_arguments","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":25072,"byte_end":25402,"line_start":745,"line_end":755,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn tarjan_scc(","highlight_start":5,"highlight_end":19},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        cfg: &ControlFlowGraph,","highlight_start":1,"highlight_end":32},{"text":"        v: BlockId,","highlight_start":1,"highlight_end":20},{"text":"        index_counter: &mut usize,","highlight_start":1,"highlight_end":35},{"text":"        stack: &mut Vec<BlockId>,","highlight_start":1,"highlight_end":34},{"text":"        indices: &mut HashMap<BlockId, usize>,","highlight_start":1,"highlight_end":47},{"text":"        lowlinks: &mut HashMap<BlockId, usize>,","highlight_start":1,"highlight_end":48},{"text":"        on_stack: &mut HashSet<BlockId>,","highlight_start":1,"highlight_end":41},{"text":"        sccs: &mut Vec<Vec<BlockId>>,","highlight_start":1,"highlight_end":38},{"text":"    ) {","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::too_many_arguments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many arguments (9/7)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/cfg.rs:745:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m745\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn tarjan_scc(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m747\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        cfg: &ControlFlowGraph,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        v: BlockId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m754\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sccs: &mut Vec<Vec<BlockId>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m755\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::too_many_arguments)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"parameter is only used in recursion","code":{"code":"clippy::only_used_in_recursion","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":25096,"byte_end":25100,"line_start":746,"line_end":746,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"        &self,","highlight_start":10,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"parameter used here","code":null,"level":"note","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":25729,"byte_end":25733,"line_start":765,"line_end":765,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    self.tarjan_scc(","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::only_used_in_recursion)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: parameter is only used in recursion\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/cfg.rs:746:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: parameter used here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/cfg.rs:765:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m765\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    self.tarjan_scc(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::only_used_in_recursion)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to want to iterate on a map's values","code":{"code":"clippy::for_kv_map","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":29652,"byte_end":29668,"line_start":886,"line_end":886,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"        for (_block_id, ir_block) in &function.blocks {","highlight_start":38,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::for_kv_map)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use the corresponding method","code":null,"level":"help","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":29627,"byte_end":29648,"line_start":886,"line_end":886,"column_start":13,"column_end":34,"is_primary":true,"text":[{"text":"        for (_block_id, ir_block) in &function.blocks {","highlight_start":13,"highlight_end":34}],"label":null,"suggested_replacement":"ir_block","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/analysis/cfg.rs","byte_start":29652,"byte_end":29668,"line_start":886,"line_end":886,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"        for (_block_id, ir_block) in &function.blocks {","highlight_start":38,"highlight_end":54}],"label":null,"suggested_replacement":"function.blocks.values()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to want to iterate on a map's values\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/cfg.rs:886:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m886\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (_block_id, ir_block) in &function.blocks {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::for_kv_map)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the corresponding method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m886\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        for \u001b[0m\u001b[0m\u001b[38;5;9m(_block_id, ir_block)\u001b[0m\u001b[0m in \u001b[0m\u001b[0m\u001b[38;5;9m&function.blocks\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m886\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        for \u001b[0m\u001b[0m\u001b[38;5;10mir_block\u001b[0m\u001b[0m in \u001b[0m\u001b[0m\u001b[38;5;10mfunction.blocks.values()\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"calling `push_str()` using a single-character string literal","code":{"code":"clippy::single_char_add_str","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":41468,"byte_end":41486,"line_start":1258,"line_end":1258,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        dot.push_str(\"\\n\");","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::single_char_add_str)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `push` with a character literal","code":null,"level":"help","spans":[{"file_name":"src/analysis/cfg.rs","byte_start":41468,"byte_end":41486,"line_start":1258,"line_end":1258,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        dot.push_str(\"\\n\");","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":"dot.push('\\n')","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: calling `push_str()` using a single-character string literal\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/cfg.rs:1258:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        dot.push_str(\"\\n\");\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using `push` with a character literal: `dot.push('\\n')`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::single_char_add_str)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type `analysis::types::Type` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`","code":{"code":"clippy::inherent_to_string_shadow_display","explanation":null},"level":"error","spans":[{"file_name":"src/analysis/types.rs","byte_start":18726,"byte_end":20457,"line_start":522,"line_end":555,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn to_string(&self) -> String {","highlight_start":5,"highlight_end":40},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Type::Primitive(p) => format!(\"{:?}\", p),","highlight_start":1,"highlight_end":54},{"text":"            Type::Array(elem) => format!(\"Array<{}>\", elem.to_string()),","highlight_start":1,"highlight_end":73},{"text":"            Type::Map { key, value } => format!(\"Map<{}, {}>\", key.to_string(), value.to_string()),","highlight_start":1,"highlight_end":100},{"text":"            Type::Buffer => \"Buffer\".to_string(),","highlight_start":1,"highlight_end":50},{"text":"            Type::Struct(s) => s.name.clone().unwrap_or_else(|| \"Struct\".to_string()),","highlight_start":1,"highlight_end":87},{"text":"            Type::Union(types) => {","highlight_start":1,"highlight_end":36},{"text":"                let type_strs: Vec<String> = types.iter().map(|t| t.to_string()).collect();","highlight_start":1,"highlight_end":92},{"text":"                format!(\"({})\", type_strs.join(\" | \"))","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            Type::Function {","highlight_start":1,"highlight_end":29},{"text":"                parameters,","highlight_start":1,"highlight_end":28},{"text":"                return_type,","highlight_start":1,"highlight_end":29},{"text":"            } => {","highlight_start":1,"highlight_end":19},{"text":"                let param_strs: Vec<String> = parameters.iter().map(|p| p.to_string()).collect();","highlight_start":1,"highlight_end":98},{"text":"                format!(\"({}) -> {}\", param_strs.join(\", \"), return_type.to_string())","highlight_start":1,"highlight_end":86},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            Type::Nullable(inner) => format!(\"{}?\", inner.to_string()),","highlight_start":1,"highlight_end":72},{"text":"            Type::Generic { base, parameters } => {","highlight_start":1,"highlight_end":52},{"text":"                let param_strs: Vec<String> = parameters.iter().map(|p| p.to_string()).collect();","highlight_start":1,"highlight_end":98},{"text":"                format!(\"{}<{}>\", base, param_strs.join(\", \"))","highlight_start":1,"highlight_end":63},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            Type::Contract(c) => c.name.clone(),","highlight_start":1,"highlight_end":49},{"text":"            Type::InteropInterface(name) => format!(\"InteropInterface({})\", name),","highlight_start":1,"highlight_end":83},{"text":"            Type::Pointer(inner) => format!(\"*{}\", inner.to_string()),","highlight_start":1,"highlight_end":71},{"text":"            Type::UserDefined(name) => name.clone(),","highlight_start":1,"highlight_end":53},{"text":"            Type::Variable(var) => format!(\"T{}\", var),","highlight_start":1,"highlight_end":56},{"text":"            Type::Unknown => \"?\".to_string(),","highlight_start":1,"highlight_end":46},{"text":"            Type::Any => \"Any\".to_string(),","highlight_start":1,"highlight_end":44},{"text":"            Type::Never => \"Never\".to_string(),","highlight_start":1,"highlight_end":48},{"text":"            Type::Void => \"void\".to_string(),","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the inherent method from type `analysis::types::Type`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[deny(clippy::inherent_to_string_shadow_display)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: type `analysis::types::Type` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:522:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn to_string(&self) -> String {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Primitive(p) => format!(\"{:?}\", p),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m525\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Array(elem) => format!(\"Array<{}>\", elem.to_string()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m555\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the inherent method from type `analysis::types::Type`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[deny(clippy::inherent_to_string_shadow_display)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string` applied to a type that implements `Display` in `format!` args","code":{"code":"clippy::to_string_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":18895,"byte_end":18907,"line_start":525,"line_end":525,"column_start":59,"column_end":71,"is_primary":true,"text":[{"text":"            Type::Array(elem) => format!(\"Array<{}>\", elem.to_string()),","highlight_start":59,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::to_string_in_format_args)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":18895,"byte_end":18907,"line_start":525,"line_end":525,"column_start":59,"column_end":71,"is_primary":true,"text":[{"text":"            Type::Array(elem) => format!(\"Array<{}>\", elem.to_string()),","highlight_start":59,"highlight_end":71}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string` applied to a type that implements `Display` in `format!` args\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:525:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m525\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Array(elem) => format!(\"Array<{}>\", elem.to_string()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::to_string_in_format_args)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string` applied to a type that implements `Display` in `format!` args","code":{"code":"clippy::to_string_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":18976,"byte_end":18988,"line_start":526,"line_end":526,"column_start":67,"column_end":79,"is_primary":true,"text":[{"text":"            Type::Map { key, value } => format!(\"Map<{}, {}>\", key.to_string(), value.to_string()),","highlight_start":67,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":18976,"byte_end":18988,"line_start":526,"line_end":526,"column_start":67,"column_end":79,"is_primary":true,"text":[{"text":"            Type::Map { key, value } => format!(\"Map<{}, {}>\", key.to_string(), value.to_string()),","highlight_start":67,"highlight_end":79}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string` applied to a type that implements `Display` in `format!` args\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:526:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Map { key, value } => format!(\"Map<{}, {}>\", key.to_string(), value.to_string()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string` applied to a type that implements `Display` in `format!` args","code":{"code":"clippy::to_string_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":18995,"byte_end":19007,"line_start":526,"line_end":526,"column_start":86,"column_end":98,"is_primary":true,"text":[{"text":"            Type::Map { key, value } => format!(\"Map<{}, {}>\", key.to_string(), value.to_string()),","highlight_start":86,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":18995,"byte_end":19007,"line_start":526,"line_end":526,"column_start":86,"column_end":98,"is_primary":true,"text":[{"text":"            Type::Map { key, value } => format!(\"Map<{}, {}>\", key.to_string(), value.to_string()),","highlight_start":86,"highlight_end":98}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string` applied to a type that implements `Display` in `format!` args\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:526:86\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Map { key, value } => format!(\"Map<{}, {}>\", key.to_string(), value.to_string()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string` applied to a type that implements `Display` in `format!` args","code":{"code":"clippy::to_string_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":19619,"byte_end":19631,"line_start":538,"line_end":538,"column_start":73,"column_end":85,"is_primary":true,"text":[{"text":"                format!(\"({}) -> {}\", param_strs.join(\", \"), return_type.to_string())","highlight_start":73,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":19619,"byte_end":19631,"line_start":538,"line_end":538,"column_start":73,"column_end":85,"is_primary":true,"text":[{"text":"                format!(\"({}) -> {}\", param_strs.join(\", \"), return_type.to_string())","highlight_start":73,"highlight_end":85}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string` applied to a type that implements `Display` in `format!` args\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:538:73\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                format!(\"({}) -> {}\", param_strs.join(\", \"), return_type.to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string` applied to a type that implements `Display` in `format!` args","code":{"code":"clippy::to_string_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":19704,"byte_end":19716,"line_start":540,"line_end":540,"column_start":58,"column_end":70,"is_primary":true,"text":[{"text":"            Type::Nullable(inner) => format!(\"{}?\", inner.to_string()),","highlight_start":58,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":19704,"byte_end":19716,"line_start":540,"line_end":540,"column_start":58,"column_end":70,"is_primary":true,"text":[{"text":"            Type::Nullable(inner) => format!(\"{}?\", inner.to_string()),","highlight_start":58,"highlight_end":70}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string` applied to a type that implements `Display` in `format!` args\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:540:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Nullable(inner) => format!(\"{}?\", inner.to_string()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`to_string` applied to a type that implements `Display` in `format!` args","code":{"code":"clippy::to_string_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":20134,"byte_end":20146,"line_start":547,"line_end":547,"column_start":57,"column_end":69,"is_primary":true,"text":[{"text":"            Type::Pointer(inner) => format!(\"*{}\", inner.to_string()),","highlight_start":57,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":20134,"byte_end":20146,"line_start":547,"line_end":547,"column_start":57,"column_end":69,"is_primary":true,"text":[{"text":"            Type::Pointer(inner) => format!(\"*{}\", inner.to_string()),","highlight_start":57,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `to_string` applied to a type that implements `Display` in `format!` args\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:547:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Pointer(inner) => format!(\"*{}\", inner.to_string()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to want to iterate on a map's values","code":{"code":"clippy::for_kv_map","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":27639,"byte_end":27655,"line_start":779,"line_end":779,"column_start":35,"column_end":51,"is_primary":true,"text":[{"text":"        for (_block_id, block) in &function.blocks {","highlight_start":35,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use the corresponding method","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":27617,"byte_end":27635,"line_start":779,"line_end":779,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"        for (_block_id, block) in &function.blocks {","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":"block","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/analysis/types.rs","byte_start":27639,"byte_end":27655,"line_start":779,"line_end":779,"column_start":35,"column_end":51,"is_primary":true,"text":[{"text":"        for (_block_id, block) in &function.blocks {","highlight_start":35,"highlight_end":51}],"label":null,"suggested_replacement":"function.blocks.values()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to want to iterate on a map's values\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:779:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (_block_id, block) in &function.blocks {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the corresponding method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        for \u001b[0m\u001b[0m\u001b[38;5;9m(_block_id, block)\u001b[0m\u001b[0m in \u001b[0m\u001b[0m\u001b[38;5;9m&function.blocks\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        for \u001b[0m\u001b[0m\u001b[38;5;10mblock\u001b[0m\u001b[0m in \u001b[0m\u001b[0m\u001b[38;5;10mfunction.blocks.values()\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if let` can be collapsed into the outer `match`","code":{"code":"clippy::collapsible_match","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":32874,"byte_end":33043,"line_start":920,"line_end":923,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if let Some(result_var) = target {","highlight_start":17,"highlight_end":51},{"text":"                    self.context","highlight_start":1,"highlight_end":33},{"text":"                        .set_variable_type(result_var.name.clone(), Type::Unknown);","highlight_start":1,"highlight_end":84},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the outer pattern can be modified to include the inner pattern","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":32757,"byte_end":32763,"line_start":918,"line_end":918,"column_start":39,"column_end":45,"is_primary":true,"text":[{"text":"            Operation::ContractCall { target, .. } => {","highlight_start":39,"highlight_end":45}],"label":"replace this binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/analysis/types.rs","byte_start":32881,"byte_end":32897,"line_start":920,"line_end":920,"column_start":24,"column_end":40,"is_primary":true,"text":[{"text":"                if let Some(result_var) = target {","highlight_start":24,"highlight_end":40}],"label":"with this pattern, prefixed by `target`:","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_match)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if let` can be collapsed into the outer `match`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:920:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let Some(result_var) = target {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m921\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    self.context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m922\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .set_variable_type(result_var.name.clone(), Type::Unknown);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m923\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the outer pattern can be modified to include the inner pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:918:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m918\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Operation::ContractCall { target, .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mreplace this binding\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m919\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                // Contract call result type - could be inferred from contract ABI\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let Some(result_var) = target {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwith this pattern, prefixed by `target`:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_match)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if let` can be collapsed into the outer `match`","code":{"code":"clippy::collapsible_match","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":33205,"byte_end":33374,"line_start":928,"line_end":931,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if let Some(result_var) = target {","highlight_start":17,"highlight_end":51},{"text":"                    self.context","highlight_start":1,"highlight_end":33},{"text":"                        .set_variable_type(result_var.name.clone(), Type::Unknown);","highlight_start":1,"highlight_end":84},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the outer pattern can be modified to include the inner pattern","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":33092,"byte_end":33098,"line_start":926,"line_end":926,"column_start":34,"column_end":40,"is_primary":true,"text":[{"text":"            Operation::Storage { target, .. } => {","highlight_start":34,"highlight_end":40}],"label":"replace this binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/analysis/types.rs","byte_start":33212,"byte_end":33228,"line_start":928,"line_end":928,"column_start":24,"column_end":40,"is_primary":true,"text":[{"text":"                if let Some(result_var) = target {","highlight_start":24,"highlight_end":40}],"label":"with this pattern, prefixed by `target`:","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if let` can be collapsed into the outer `match`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:928:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let Some(result_var) = target {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    self.context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m930\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .set_variable_type(result_var.name.clone(), Type::Unknown);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m931\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the outer pattern can be modified to include the inner pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:926:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m926\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Operation::Storage { target, .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mreplace this binding\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m927\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                // Storage operations typically return the stored/loaded value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let Some(result_var) = target {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwith this pattern, prefixed by `target`:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider using `sort_by_key`","code":{"code":"clippy::unnecessary_sort_by","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":47300,"byte_end":47359,"line_start":1285,"line_end":1285,"column_start":17,"column_end":76,"is_primary":true,"text":[{"text":"                all_types.sort_by(|a, b| a.to_string().cmp(&b.to_string()));","highlight_start":17,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::unnecessary_sort_by)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":47300,"byte_end":47359,"line_start":1285,"line_end":1285,"column_start":17,"column_end":76,"is_primary":true,"text":[{"text":"                all_types.sort_by(|a, b| a.to_string().cmp(&b.to_string()));","highlight_start":17,"highlight_end":76}],"label":null,"suggested_replacement":"all_types.sort_by_key(|a| a.to_string())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider using `sort_by_key`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1285:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                all_types.sort_by(|a, b| a.to_string().cmp(&b.to_string()));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `all_types.sort_by_key(|a| a.to_string())`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::unnecessary_sort_by)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"consider using `sort_by_key`","code":{"code":"clippy::unnecessary_sort_by","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":47639,"byte_end":47698,"line_start":1293,"line_end":1293,"column_start":17,"column_end":76,"is_primary":true,"text":[{"text":"                all_types.sort_by(|a, b| a.to_string().cmp(&b.to_string()));","highlight_start":17,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":47639,"byte_end":47698,"line_start":1293,"line_end":1293,"column_start":17,"column_end":76,"is_primary":true,"text":[{"text":"                all_types.sort_by(|a, b| a.to_string().cmp(&b.to_string()));","highlight_start":17,"highlight_end":76}],"label":null,"suggested_replacement":"all_types.sort_by_key(|a| a.to_string())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider using `sort_by_key`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1293:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1293\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                all_types.sort_by(|a, b| a.to_string().cmp(&b.to_string()));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `all_types.sort_by_key(|a| a.to_string())`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`format!` in `format!` args","code":{"code":"clippy::format_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":52554,"byte_end":52787,"line_start":1421,"line_end":1426,"column_start":36,"column_end":26,"is_primary":true,"text":[{"text":"                        type_name: format!(","highlight_start":36,"highlight_end":44},{"text":"                            \"{} {} {}\",","highlight_start":1,"highlight_end":40},{"text":"                            left_resolved.to_string(),","highlight_start":1,"highlight_end":55},{"text":"                            format!(\"{:?}\", op),","highlight_start":1,"highlight_end":49},{"text":"                            right_resolved.to_string()","highlight_start":1,"highlight_end":55},{"text":"                        ),","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"combine the `format!(..)` arguments with the outer `format!(..)` call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider changing `format!` to `format_args!`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::format_in_format_args)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `format!` in `format!` args\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1421:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1421\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        type_name: format!(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m ____________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            \"{} {} {}\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            left_resolved.to_string(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            format!(\"{:?}\", op),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            right_resolved.to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        ),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: combine the `format!(..)` arguments with the outer `format!(..)` call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider changing `format!` to `format_args!`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::format_in_format_args)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`format!` in `format!` args","code":{"code":"clippy::format_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":53353,"byte_end":53566,"line_start":1439,"line_end":1444,"column_start":32,"column_end":22,"is_primary":true,"text":[{"text":"                    type_name: format!(","highlight_start":32,"highlight_end":40},{"text":"                        \"{} {} {}\",","highlight_start":1,"highlight_end":36},{"text":"                        left_resolved.to_string(),","highlight_start":1,"highlight_end":51},{"text":"                        format!(\"{:?}\", op),","highlight_start":1,"highlight_end":45},{"text":"                        right_resolved.to_string()","highlight_start":1,"highlight_end":51},{"text":"                    ),","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"combine the `format!(..)` arguments with the outer `format!(..)` call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider changing `format!` to `format_args!`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `format!` in `format!` args\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1439:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                    type_name: format!(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m ________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1440\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        \"{} {} {}\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1441\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        left_resolved.to_string(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        format!(\"{:?}\", op),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1443\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        right_resolved.to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1444\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: combine the `format!(..)` arguments with the outer `format!(..)` call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider changing `format!` to `format_args!`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`format!` in `format!` args","code":{"code":"clippy::format_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":54126,"byte_end":54359,"line_start":1457,"line_end":1462,"column_start":36,"column_end":26,"is_primary":true,"text":[{"text":"                        type_name: format!(","highlight_start":36,"highlight_end":44},{"text":"                            \"{} {} {}\",","highlight_start":1,"highlight_end":40},{"text":"                            left_resolved.to_string(),","highlight_start":1,"highlight_end":55},{"text":"                            format!(\"{:?}\", op),","highlight_start":1,"highlight_end":49},{"text":"                            right_resolved.to_string()","highlight_start":1,"highlight_end":55},{"text":"                        ),","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"combine the `format!(..)` arguments with the outer `format!(..)` call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider changing `format!` to `format_args!`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `format!` in `format!` args\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1457:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        type_name: format!(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m ____________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            \"{} {} {}\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            left_resolved.to_string(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            format!(\"{:?}\", op),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            right_resolved.to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        ),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: combine the `format!(..)` arguments with the outer `format!(..)` call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider changing `format!` to `format_args!`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`format!` in `format!` args","code":{"code":"clippy::format_in_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":54901,"byte_end":55114,"line_start":1475,"line_end":1480,"column_start":32,"column_end":22,"is_primary":true,"text":[{"text":"                    type_name: format!(","highlight_start":32,"highlight_end":40},{"text":"                        \"{} {} {}\",","highlight_start":1,"highlight_end":36},{"text":"                        left_resolved.to_string(),","highlight_start":1,"highlight_end":51},{"text":"                        format!(\"{:?}\", op),","highlight_start":1,"highlight_end":45},{"text":"                        right_resolved.to_string()","highlight_start":1,"highlight_end":51},{"text":"                    ),","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"combine the `format!(..)` arguments with the outer `format!(..)` call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"or consider changing `format!` to `format_args!`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `format!` in `format!` args\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1475:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1475\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                    type_name: format!(\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m ________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        \"{} {} {}\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        left_resolved.to_string(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1478\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        format!(\"{:?}\", op),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1479\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        right_resolved.to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1480\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: combine the `format!(..)` arguments with the outer `format!(..)` call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: or consider changing `format!` to `format_args!`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if let` can be collapsed into the outer `if let`","code":{"code":"clippy::collapsible_match","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":57848,"byte_end":57969,"line_start":1557,"line_end":1559,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if let Type::Function { return_type, .. } = func_type {","highlight_start":13,"highlight_end":68},{"text":"                return Ok((**return_type).clone());","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the outer pattern can be modified to include the inner pattern","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":57779,"byte_end":57788,"line_start":1556,"line_end":1556,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"        if let Some(func_type) = self.context.function_types.get(function) {","highlight_start":21,"highlight_end":30}],"label":"replace this binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/analysis/types.rs","byte_start":57855,"byte_end":57889,"line_start":1557,"line_end":1557,"column_start":20,"column_end":54,"is_primary":true,"text":[{"text":"            if let Type::Function { return_type, .. } = func_type {","highlight_start":20,"highlight_end":54}],"label":"with this pattern","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if let` can be collapsed into the outer `if let`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1557:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Type::Function { return_type, .. } = func_type {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return Ok((**return_type).clone());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1559\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the outer pattern can be modified to include the inner pattern\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1556:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(func_type) = self.context.function_types.get(function) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mreplace this binding\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Type::Function { return_type, .. } = func_type {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwith this pattern\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this expression creates a reference which is immediately dereferenced by the compiler","code":{"code":"clippy::needless_borrow","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":66552,"byte_end":66558,"line_start":1780,"line_end":1780,"column_start":74,"column_end":80,"is_primary":true,"text":[{"text":"            (Type::Nullable(inner), other) => self.is_convertible(inner, &other),","highlight_start":74,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::needless_borrow)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":66552,"byte_end":66558,"line_start":1780,"line_end":1780,"column_start":74,"column_end":80,"is_primary":true,"text":[{"text":"            (Type::Nullable(inner), other) => self.is_convertible(inner, &other),","highlight_start":74,"highlight_end":80}],"label":null,"suggested_replacement":"other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this expression creates a reference which is immediately dereferenced by the compiler\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1780:74\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1780\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Type::Nullable(inner), other) => self.is_convertible(inner, &other),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `other`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_borrow)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this expression creates a reference which is immediately dereferenced by the compiler","code":{"code":"clippy::needless_borrow","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":66627,"byte_end":66633,"line_start":1781,"line_end":1781,"column_start":67,"column_end":73,"is_primary":true,"text":[{"text":"            (other, Type::Nullable(inner)) => self.is_convertible(&other, inner),","highlight_start":67,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/analysis/types.rs","byte_start":66627,"byte_end":66633,"line_start":1781,"line_end":1781,"column_start":67,"column_end":73,"is_primary":true,"text":[{"text":"            (other, Type::Nullable(inner)) => self.is_convertible(&other, inner),","highlight_start":67,"highlight_end":73}],"label":null,"suggested_replacement":"other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this expression creates a reference which is immediately dereferenced by the compiler\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1781:67\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1781\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (other, Type::Nullable(inner)) => self.is_convertible(&other, inner),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `other`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"parameter is only used in recursion","code":{"code":"clippy::only_used_in_recursion","explanation":null},"level":"warning","spans":[{"file_name":"src/analysis/types.rs","byte_start":71159,"byte_end":71163,"line_start":1908,"line_end":1908,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"    fn format_type_annotation(&self, ty: &Type) -> String {","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"parameter used here","code":null,"level":"note","spans":[{"file_name":"src/analysis/types.rs","byte_start":72034,"byte_end":72038,"line_start":1923,"line_end":1923,"column_start":50,"column_end":54,"is_primary":true,"text":[{"text":"            Type::Array(elem) => format!(\"{}[]\", self.format_type_annotation(elem)),","highlight_start":50,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/analysis/types.rs","byte_start":72166,"byte_end":72170,"line_start":1926,"line_end":1926,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                self.format_type_annotation(key),","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/analysis/types.rs","byte_start":72216,"byte_end":72220,"line_start":1927,"line_end":1927,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                self.format_type_annotation(value)","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/analysis/types.rs","byte_start":72447,"byte_end":72451,"line_start":1931,"line_end":1931,"column_start":53,"column_end":57,"is_primary":true,"text":[{"text":"            Type::Nullable(inner) => format!(\"{}?\", self.format_type_annotation(inner)),","highlight_start":53,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/analysis/types.rs","byte_start":72628,"byte_end":72632,"line_start":1935,"line_end":1935,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"                    .map(|t| self.format_type_annotation(t))","highlight_start":30,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: parameter is only used in recursion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1908:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1908\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn format_type_annotation(&self, ty: &Type) -> String {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: parameter used here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/analysis/types.rs:1923:50\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1923\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Array(elem) => format!(\"{}[]\", self.format_type_annotation(elem)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1926\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.format_type_annotation(key),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1927\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.format_type_annotation(value)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1931\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Nullable(inner) => format!(\"{}?\", self.format_type_annotation(inner)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1935\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    .map(|t| self.format_type_annotation(t))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":14185,"byte_end":14454,"line_start":382,"line_end":387,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if self.detected_loops.contains(&block.id) {","highlight_start":9,"highlight_end":53},{"text":"            if matches!(block.terminator, Terminator::Branch { .. }) {","highlight_start":1,"highlight_end":71},{"text":"                self.current_indent -= 1;","highlight_start":1,"highlight_end":42},{"text":"                output.push_str(&self.format_indented(self.formatter.get_block_end()));","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_if)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":14227,"byte_end":14229,"line_start":382,"line_end":382,"column_start":51,"column_end":53,"is_primary":true,"text":[{"text":"        if self.detected_loops.contains(&block.id) {","highlight_start":51,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":14444,"byte_end":14454,"line_start":386,"line_end":387,"column_start":14,"column_end":10,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":14242,"byte_end":14244,"line_start":383,"line_end":383,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"            if matches!(block.terminator, Terminator::Branch { .. }) {","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"&&","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:382:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m382\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.detected_loops.contains(&block.id) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m383\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if matches!(block.terminator, Terminator::Branch { .. }) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m384\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.current_indent -= 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m385\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                output.push_str(&self.format_indented(self.formatter.get_block_end()));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_if)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m382\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        if self.detected_loops.contains(&block.id)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m383\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m&&\u001b[0m\u001b[0m matches!(block.terminator, Terminator::Branch { .. }) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m384\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 self.current_indent -= 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m385\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 output.push_str(&self.format_indented(self.formatter.get_block_end()));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"stripping a prefix manually","code":{"code":"clippy::manual_strip","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":15311,"byte_end":15321,"line_start":409,"line_end":409,"column_start":59,"column_end":69,"is_primary":true,"text":[{"text":"                    if let Ok(hash) = u32::from_str_radix(&name[2..], 16) {","highlight_start":59,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the prefix was tested here","code":null,"level":"note","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":15225,"byte_end":15251,"line_start":408,"line_end":408,"column_start":37,"column_end":63,"is_primary":true,"text":[{"text":"                let resolved_name = if name.starts_with(\"0x\") {","highlight_start":37,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::manual_strip)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using the `strip_prefix` method","code":null,"level":"help","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":15225,"byte_end":15251,"line_start":408,"line_end":408,"column_start":37,"column_end":63,"is_primary":true,"text":[{"text":"                let resolved_name = if name.starts_with(\"0x\") {","highlight_start":37,"highlight_end":63}],"label":null,"suggested_replacement":"if let Some(<stripped>) = name.strip_prefix(\"0x\") ","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":15311,"byte_end":15321,"line_start":409,"line_end":409,"column_start":59,"column_end":69,"is_primary":true,"text":[{"text":"                    if let Ok(hash) = u32::from_str_radix(&name[2..], 16) {","highlight_start":59,"highlight_end":69}],"label":null,"suggested_replacement":"<stripped>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: stripping a prefix manually\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:409:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if let Ok(hash) = u32::from_str_radix(&name[2..], 16) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the prefix was tested here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:408:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let resolved_name = if name.starts_with(\"0x\") {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::manual_strip)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using the `strip_prefix` method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                let resolved_name = \u001b[0m\u001b[0m\u001b[38;5;10mif let Some(<stripped>) = name.strip_prefix(\"0x\") \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                    if let Ok(hash) = u32::from_str_radix(\u001b[0m\u001b[0m\u001b[38;5;10m<stripped>\u001b[0m\u001b[0m, 16) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you are using an explicit closure for cloning elements","code":{"code":"clippy::map_clone","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":15353,"byte_end":15459,"line_start":410,"line_end":412,"column_start":25,"column_end":48,"is_primary":true,"text":[{"text":"                        self.syscall_names","highlight_start":25,"highlight_end":43},{"text":"                            .get(&hash)","highlight_start":1,"highlight_end":40},{"text":"                            .map(|s| s.clone())","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_clone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::map_clone)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider calling the dedicated `cloned` method","code":null,"level":"help","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":15353,"byte_end":15459,"line_start":410,"line_end":412,"column_start":25,"column_end":48,"is_primary":true,"text":[{"text":"                        self.syscall_names","highlight_start":25,"highlight_end":43},{"text":"                            .get(&hash)","highlight_start":1,"highlight_end":40},{"text":"                            .map(|s| s.clone())","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":"self.syscall_names\n                            .get(&hash).cloned()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you are using an explicit closure for cloning elements\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:410:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m410\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.syscall_names\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            .get(&hash)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m412\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            .map(|s| s.clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::map_clone)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider calling the dedicated `cloned` method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m410\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10mself.syscall_names\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             .get(&hash).cloned()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this expression creates a reference which is immediately dereferenced by the compiler","code":{"code":"clippy::needless_borrow","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":33346,"byte_end":33358,"line_start":830,"line_end":830,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"                if self.detected_loops.contains(&true_target)","highlight_start":49,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":33346,"byte_end":33358,"line_start":830,"line_end":830,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"                if self.detected_loops.contains(&true_target)","highlight_start":49,"highlight_end":61}],"label":null,"suggested_replacement":"true_target","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this expression creates a reference which is immediately dereferenced by the compiler\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:830:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m830\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if self.detected_loops.contains(&true_target)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `true_target`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this expression creates a reference which is immediately dereferenced by the compiler","code":{"code":"clippy::needless_borrow","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":33412,"byte_end":33425,"line_start":831,"line_end":831,"column_start":53,"column_end":66,"is_primary":true,"text":[{"text":"                    || self.detected_loops.contains(&false_target)","highlight_start":53,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":33412,"byte_end":33425,"line_start":831,"line_end":831,"column_start":53,"column_end":66,"is_primary":true,"text":[{"text":"                    || self.detected_loops.contains(&false_target)","highlight_start":53,"highlight_end":66}],"label":null,"suggested_replacement":"false_target","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this expression creates a reference which is immediately dereferenced by the compiler\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:831:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m831\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    || self.detected_loops.contains(&false_target)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `false_target`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"parameter is only used in recursion","code":{"code":"clippy::only_used_in_recursion","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":43718,"byte_end":43722,"line_start":1099,"line_end":1099,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"    fn format_type(&self, type_ref: &Type) -> String {","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"parameter used here","code":null,"level":"note","spans":[{"file_name":"src/backend/pseudocode.rs","byte_start":44623,"byte_end":44627,"line_start":1114,"line_end":1114,"column_start":63,"column_end":67,"is_primary":true,"text":[{"text":"            Type::Array(element_type) => format!(\"Array<{}>\", self.format_type(element_type)),","highlight_start":63,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":44752,"byte_end":44756,"line_start":1117,"line_end":1117,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                self.format_type(key),","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":44791,"byte_end":44795,"line_start":1118,"line_end":1118,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                self.format_type(value)","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":45140,"byte_end":45144,"line_start":1126,"line_end":1126,"column_start":67,"column_end":71,"is_primary":true,"text":[{"text":"                let type_strs: Vec<String> = types.iter().map(|t| self.format_type(t)).collect();","highlight_start":67,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":45438,"byte_end":45442,"line_start":1134,"line_end":1134,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"                    parameters.iter().map(|p| self.format_type(p)).collect();","highlight_start":47,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":45592,"byte_end":45596,"line_start":1138,"line_end":1138,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    self.format_type(return_type)","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":45851,"byte_end":45855,"line_start":1143,"line_end":1143,"column_start":52,"column_end":56,"is_primary":true,"text":[{"text":"            Type::Pointer(inner) => format!(\"*{}\", self.format_type(inner)),","highlight_start":52,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":45929,"byte_end":45933,"line_start":1144,"line_end":1144,"column_start":53,"column_end":57,"is_primary":true,"text":[{"text":"            Type::Nullable(inner) => format!(\"{}?\", self.format_type(inner)),","highlight_start":53,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/backend/pseudocode.rs","byte_start":46099,"byte_end":46103,"line_start":1147,"line_end":1147,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"                    parameters.iter().map(|p| self.format_type(p)).collect();","highlight_start":47,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: parameter is only used in recursion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:1099:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1099\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn format_type(&self, type_ref: &Type) -> String {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: parameter used here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/pseudocode.rs:1114:63\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Array(element_type) => format!(\"Array<{}>\", self.format_type(element_type)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.format_type(key),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.format_type(value)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let type_strs: Vec<String> = types.iter().map(|t| self.format_type(t)).collect();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    parameters.iter().map(|p| self.format_type(p)).collect();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    self.format_type(return_type)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Pointer(inner) => format!(\"*{}\", self.format_type(inner)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Type::Nullable(inner) => format!(\"{}?\", self.format_type(inner)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    parameters.iter().map(|p| self.format_type(p)).collect();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"useless conversion to the same type: `core::ir::ComplexityMetrics`","code":{"code":"clippy::useless_conversion","explanation":null},"level":"warning","spans":[{"file_name":"src/backend/reports.rs","byte_start":473,"byte_end":516,"line_start":15,"line_end":15,"column_start":23,"column_end":66,"is_primary":true,"text":[{"text":"            security: function.metadata.complexity.clone().into(),","highlight_start":23,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::useless_conversion)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider removing `.into()`","code":null,"level":"help","spans":[{"file_name":"src/backend/reports.rs","byte_start":473,"byte_end":516,"line_start":15,"line_end":15,"column_start":23,"column_end":66,"is_primary":true,"text":[{"text":"            security: function.metadata.complexity.clone().into(),","highlight_start":23,"highlight_end":66}],"label":null,"suggested_replacement":"function.metadata.complexity.clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: useless conversion to the same type: `core::ir::ComplexityMetrics`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backend/reports.rs:15:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            security: function.metadata.complexity.clone().into(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider removing `.into()`: `function.metadata.complexity.clone()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::useless_conversion)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `impl` can be derived","code":{"code":"clippy::derivable_impls","explanation":null},"level":"warning","spans":[{"file_name":"src/common/config.rs","byte_start":810,"byte_end":1148,"line_start":34,"line_end":44,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"impl Default for DecompilerConfig {","highlight_start":1,"highlight_end":36},{"text":"    fn default() -> Self {","highlight_start":1,"highlight_end":27},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            analysis: AnalysisConfig::default(),","highlight_start":1,"highlight_end":49},{"text":"            output: OutputConfig::default(),","highlight_start":1,"highlight_end":45},{"text":"            plugins: PluginConfig::default(),","highlight_start":1,"highlight_end":46},{"text":"            performance: PerformanceConfig::default(),","highlight_start":1,"highlight_end":55},{"text":"            syscalls: SyscallConfig::default(),","highlight_start":1,"highlight_end":48},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::derivable_impls)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace the manual implementation with a derive attribute","code":null,"level":"help","spans":[{"file_name":"src/common/config.rs","byte_start":810,"byte_end":1149,"line_start":34,"line_end":45,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl Default for DecompilerConfig {","highlight_start":1,"highlight_end":36},{"text":"    fn default() -> Self {","highlight_start":1,"highlight_end":27},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            analysis: AnalysisConfig::default(),","highlight_start":1,"highlight_end":49},{"text":"            output: OutputConfig::default(),","highlight_start":1,"highlight_end":45},{"text":"            plugins: PluginConfig::default(),","highlight_start":1,"highlight_end":46},{"text":"            performance: PerformanceConfig::default(),","highlight_start":1,"highlight_end":55},{"text":"            syscalls: SyscallConfig::default(),","highlight_start":1,"highlight_end":48},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/common/config.rs","byte_start":267,"byte_end":267,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct DecompilerConfig {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Default)]\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `impl` can be derived\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/config.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Default for DecompilerConfig {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn default() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            analysis: AnalysisConfig::default(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::derivable_impls)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: replace the manual implementation with a derive attribute\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ #[derive(Default)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0mpub struct DecompilerConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `map_or` can be simplified","code":{"code":"clippy::unnecessary_map_or","explanation":null},"level":"warning","spans":[{"file_name":"src/common/config.rs","byte_start":8153,"byte_end":8204,"line_start":303,"line_end":303,"column_start":20,"column_end":71,"is_primary":true,"text":[{"text":"                if path.extension().map_or(false, |ext| ext == \"toml\") {","highlight_start":20,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::unnecessary_map_or)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use is_some_and instead","code":null,"level":"help","spans":[{"file_name":"src/common/config.rs","byte_start":8170,"byte_end":8176,"line_start":303,"line_end":303,"column_start":37,"column_end":43,"is_primary":true,"text":[{"text":"                if path.extension().map_or(false, |ext| ext == \"toml\") {","highlight_start":37,"highlight_end":43}],"label":null,"suggested_replacement":"is_some_and","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/common/config.rs","byte_start":8177,"byte_end":8184,"line_start":303,"line_end":303,"column_start":44,"column_end":51,"is_primary":true,"text":[{"text":"                if path.extension().map_or(false, |ext| ext == \"toml\") {","highlight_start":44,"highlight_end":51}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `map_or` can be simplified\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/common/config.rs:303:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if path.extension().map_or(false, |ext| ext == \"toml\") {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::unnecessary_map_or)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use is_some_and instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                if path.extension().\u001b[0m\u001b[0m\u001b[38;5;9mmap_or\u001b[0m\u001b[0m(\u001b[0m\u001b[0m\u001b[38;5;9mfalse, \u001b[0m\u001b[0m|ext| ext == \"toml\") {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                if path.extension().\u001b[0m\u001b[0m\u001b[38;5;10mis_some_and\u001b[0m\u001b[0m(|ext| ext == \"toml\") {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to want to iterate on a map's values","code":{"code":"clippy::for_kv_map","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":7936,"byte_end":7968,"line_start":275,"line_end":275,"column_start":32,"column_end":64,"is_primary":true,"text":[{"text":"        for (_, definition) in &config.syscalls.custom_syscalls {","highlight_start":32,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use the corresponding method","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":7917,"byte_end":7932,"line_start":275,"line_end":275,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        for (_, definition) in &config.syscalls.custom_syscalls {","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":"definition","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":7936,"byte_end":7968,"line_start":275,"line_end":275,"column_start":32,"column_end":64,"is_primary":true,"text":[{"text":"        for (_, definition) in &config.syscalls.custom_syscalls {","highlight_start":32,"highlight_end":64}],"label":null,"suggested_replacement":"config.syscalls.custom_syscalls.values()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to want to iterate on a map's values\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:275:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (_, definition) in &config.syscalls.custom_syscalls {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the corresponding method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        for \u001b[0m\u001b[0m\u001b[38;5;9m(_, definition)\u001b[0m\u001b[0m in \u001b[0m\u001b[0m\u001b[38;5;9m&config.syscalls.custom_syscalls\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        for \u001b[0m\u001b[0m\u001b[38;5;10mdefinition\u001b[0m\u001b[0m in \u001b[0m\u001b[0m\u001b[38;5;10mconfig.syscalls.custom_syscalls.values()\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":40601,"byte_end":40651,"line_start":1117,"line_end":1117,"column_start":21,"column_end":71,"is_primary":true,"text":[{"text":"                    return self.unify_types(context, &existing, other);","highlight_start":21,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::needless_return)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":40601,"byte_end":40651,"line_start":1117,"line_end":1117,"column_start":21,"column_end":71,"is_primary":true,"text":[{"text":"                    return self.unify_types(context, &existing, other);","highlight_start":21,"highlight_end":71}],"label":null,"suggested_replacement":"self.unify_types(context, &existing, other)","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":40651,"byte_end":40652,"line_start":1117,"line_end":1117,"column_start":71,"column_end":72,"is_primary":true,"text":[{"text":"                    return self.unify_types(context, &existing, other);","highlight_start":71,"highlight_end":72}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1117:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    return self.unify_types(context, &existing, other);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_return)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove `return`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;9mreturn self.unify_types(context, &existing, other);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10mself.unify_types(context, &existing, other)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":40764,"byte_end":40779,"line_start":1120,"line_end":1120,"column_start":21,"column_end":36,"is_primary":true,"text":[{"text":"                    return Ok(true);","highlight_start":21,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":40764,"byte_end":40779,"line_start":1120,"line_end":1120,"column_start":21,"column_end":36,"is_primary":true,"text":[{"text":"                    return Ok(true);","highlight_start":21,"highlight_end":36}],"label":null,"suggested_replacement":"Ok(true)","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":40779,"byte_end":40780,"line_start":1120,"line_end":1120,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"                    return Ok(true);","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1120:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    return Ok(true);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove `return`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;9mreturn Ok(true);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10mOk(true)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"parameter is only used in recursion","code":{"code":"clippy::only_used_in_recursion","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":40152,"byte_end":40156,"line_start":1104,"line_end":1104,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"        &self,","highlight_start":10,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"parameter used here","code":null,"level":"note","spans":[{"file_name":"src/core/decompiler.rs","byte_start":40608,"byte_end":40612,"line_start":1117,"line_end":1117,"column_start":28,"column_end":32,"is_primary":true,"text":[{"text":"                    return self.unify_types(context, &existing, other);","highlight_start":28,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":41177,"byte_end":41181,"line_start":1134,"line_end":1134,"column_start":57,"column_end":61,"is_primary":true,"text":[{"text":"            (Type::Array(elem1), Type::Array(elem2)) => self.unify_types(context, elem1, elem2),","highlight_start":57,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":41375,"byte_end":41379,"line_start":1138,"line_end":1138,"column_start":35,"column_end":39,"is_primary":true,"text":[{"text":"                let key_unified = self.unify_types(context, k1, k2)?;","highlight_start":35,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":41447,"byte_end":41451,"line_start":1139,"line_end":1139,"column_start":37,"column_end":41,"is_primary":true,"text":[{"text":"                let value_unified = self.unify_types(context, v1, v2)?;","highlight_start":37,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: parameter is only used in recursion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1104:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: parameter used here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1117:28\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    return self.unify_types(context, &existing, other);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Type::Array(elem1), Type::Array(elem2)) => self.unify_types(context, elem1, elem2),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let key_unified = self.unify_types(context, k1, k2)?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let value_unified = self.unify_types(context, v1, v2)?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"parameter is only used in recursion","code":{"code":"clippy::only_used_in_recursion","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":43455,"byte_end":43459,"line_start":1202,"line_end":1202,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"    fn resolve_type_variables(&self, context: &TypeInferenceContext, ty: &Type) -> Type {","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"parameter used here","code":null,"level":"note","spans":[{"file_name":"src/core/decompiler.rs","byte_start":43660,"byte_end":43664,"line_start":1206,"line_end":1206,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"                    self.resolve_type_variables(context, bound_type)","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":43914,"byte_end":43918,"line_start":1213,"line_end":1213,"column_start":38,"column_end":42,"is_primary":true,"text":[{"text":"                Type::Array(Box::new(self.resolve_type_variables(context, elem_type)))","highlight_start":38,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":44061,"byte_end":44065,"line_start":1217,"line_end":1217,"column_start":31,"column_end":35,"is_primary":true,"text":[{"text":"                key: Box::new(self.resolve_type_variables(context, key)),","highlight_start":31,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":44137,"byte_end":44141,"line_start":1218,"line_end":1218,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"                value: Box::new(self.resolve_type_variables(context, value)),","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":44278,"byte_end":44282,"line_start":1222,"line_end":1222,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"                Type::Nullable(Box::new(self.resolve_type_variables(context, inner)))","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: parameter is only used in recursion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1202:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn resolve_type_variables(&self, context: &TypeInferenceContext, ty: &Type) -> Type {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: parameter used here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1206:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    self.resolve_type_variables(context, bound_type)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Type::Array(Box::new(self.resolve_type_variables(context, elem_type)))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                key: Box::new(self.resolve_type_variables(context, key)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                value: Box::new(self.resolve_type_variables(context, value)),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Type::Nullable(Box::new(self.resolve_type_variables(context, inner)))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"stripping a prefix manually","code":{"code":"clippy::manual_strip","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":52523,"byte_end":52537,"line_start":1443,"line_end":1443,"column_start":25,"column_end":39,"is_primary":true,"text":[{"text":"                        &hash_str[2..]","highlight_start":25,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the prefix was tested here","code":null,"level":"note","spans":[{"file_name":"src/core/decompiler.rs","byte_start":52467,"byte_end":52497,"line_start":1442,"line_end":1442,"column_start":36,"column_end":66,"is_primary":true,"text":[{"text":"                    let hex_part = if hash_str.starts_with(\"0x\") {","highlight_start":36,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try using the `strip_prefix` method","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":52467,"byte_end":52497,"line_start":1442,"line_end":1442,"column_start":36,"column_end":66,"is_primary":true,"text":[{"text":"                    let hex_part = if hash_str.starts_with(\"0x\") {","highlight_start":36,"highlight_end":66}],"label":null,"suggested_replacement":"if let Some(<stripped>) = hash_str.strip_prefix(\"0x\") ","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":52523,"byte_end":52537,"line_start":1443,"line_end":1443,"column_start":25,"column_end":39,"is_primary":true,"text":[{"text":"                        &hash_str[2..]","highlight_start":25,"highlight_end":39}],"label":null,"suggested_replacement":"<stripped>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: stripping a prefix manually\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1443:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1443\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        &hash_str[2..]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the prefix was tested here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1442:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let hex_part = if hash_str.starts_with(\"0x\") {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using the `strip_prefix` method\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                    let hex_part = \u001b[0m\u001b[0m\u001b[38;5;10mif let Some(<stripped>) = hash_str.strip_prefix(\"0x\") \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1443\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m<stripped>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `match` can be collapsed into the outer `match`","code":{"code":"clippy::collapsible_match","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":63443,"byte_end":63652,"line_start":1739,"line_end":1742,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                match source {","highlight_start":17,"highlight_end":31},{"text":"                    Expression::Literal(_) => true, // Literals are always invariant","highlight_start":1,"highlight_end":85},{"text":"                    _ => false,                     // Complex expressions require analysis","highlight_start":1,"highlight_end":92},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the outer pattern can be modified to include the inner pattern","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":63232,"byte_end":63238,"line_start":1736,"line_end":1736,"column_start":33,"column_end":39,"is_primary":true,"text":[{"text":"            Operation::Assign { source, .. } => {","highlight_start":33,"highlight_end":39}],"label":"replace this binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":63478,"byte_end":63500,"line_start":1740,"line_end":1740,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"                    Expression::Literal(_) => true, // Literals are always invariant","highlight_start":21,"highlight_end":43}],"label":"with this pattern, prefixed by `source`:","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `match` can be collapsed into the outer `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1739:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                match source {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1740\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    Expression::Literal(_) => true, // Literals are always invariant\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1741\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    _ => false,                     // Complex expressions require analysis\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1742\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the outer pattern can be modified to include the inner pattern\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1736:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Operation::Assign { source, .. } => {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mreplace this binding\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1740\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    Expression::Literal(_) => true, // Literals are always invariant\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwith this pattern, prefixed by `source`:\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if let` can be collapsed into the outer `match`","code":{"code":"clippy::collapsible_match","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":66733,"byte_end":67361,"line_start":1827,"line_end":1838,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                        if let Expression::Literal(literal) = source {","highlight_start":25,"highlight_end":71},{"text":"                            // Track constant assignments","highlight_start":1,"highlight_end":58},{"text":"                            let var_name = target.name.clone();","highlight_start":1,"highlight_end":64},{"text":"                            constant_values.insert(var_name.clone(), literal.clone());","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            propagations.push(ConstantPropagation {","highlight_start":1,"highlight_end":68},{"text":"                                block_id: *block_id,","highlight_start":1,"highlight_end":53},{"text":"                                variable: var_name,","highlight_start":1,"highlight_end":52},{"text":"                                value: literal.clone(),","highlight_start":1,"highlight_end":56},{"text":"                                uses_replaced: 0, // Updated during propagation pass","highlight_start":1,"highlight_end":85},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the outer pattern can be modified to include the inner pattern","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":66695,"byte_end":66701,"line_start":1826,"line_end":1826,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"                    Operation::Assign { target, source } => {","highlight_start":49,"highlight_end":55}],"label":"replace this binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":66740,"byte_end":66768,"line_start":1827,"line_end":1827,"column_start":32,"column_end":60,"is_primary":true,"text":[{"text":"                        if let Expression::Literal(literal) = source {","highlight_start":32,"highlight_end":60}],"label":"with this pattern, prefixed by `source`:","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if let` can be collapsed into the outer `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1827:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1827\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if let Expression::Literal(literal) = source {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1828\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            // Track constant assignments\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1829\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            let var_name = target.name.clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1830\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            constant_values.insert(var_name.clone(), literal.clone());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            });\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the outer pattern can be modified to include the inner pattern\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1826:49\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1826\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    Operation::Assign { target, source } => {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mreplace this binding\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1827\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if let Expression::Literal(literal) = source {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwith this pattern, prefixed by `source`:\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if let` can be collapsed into the outer `match`","code":{"code":"clippy::collapsible_match","explanation":null},"level":"warning","spans":[{"file_name":"src/core/decompiler.rs","byte_start":68252,"byte_end":68973,"line_start":1865,"line_end":1878,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                        if let Expression::Variable(source_var) = source {","highlight_start":25,"highlight_end":75},{"text":"                            // This is a copy assignment: target = source_var","highlight_start":1,"highlight_end":78},{"text":"                            let target_name = target.name.clone();","highlight_start":1,"highlight_end":67},{"text":"                            let source_name = source_var.name.clone();","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            copy_map.insert(target_name.clone(), source_name.clone());","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            eliminations.push(CopyElimination {","highlight_start":1,"highlight_end":64},{"text":"                                block_id: *block_id,","highlight_start":1,"highlight_end":53},{"text":"                                source: source_name,","highlight_start":1,"highlight_end":53},{"text":"                                target: target_name,","highlight_start":1,"highlight_end":53},{"text":"                                uses_replaced: 0, // Updated during copy propagation","highlight_start":1,"highlight_end":85},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the outer pattern can be modified to include the inner pattern","code":null,"level":"help","spans":[{"file_name":"src/core/decompiler.rs","byte_start":68214,"byte_end":68220,"line_start":1864,"line_end":1864,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"                    Operation::Assign { target, source } => {","highlight_start":49,"highlight_end":55}],"label":"replace this binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/decompiler.rs","byte_start":68259,"byte_end":68291,"line_start":1865,"line_end":1865,"column_start":32,"column_end":64,"is_primary":true,"text":[{"text":"                        if let Expression::Variable(source_var) = source {","highlight_start":32,"highlight_end":64}],"label":"with this pattern, prefixed by `source`:","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if let` can be collapsed into the outer `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1865:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1865\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if let Expression::Variable(source_var) = source {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1866\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            // This is a copy assignment: target = source_var\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1867\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            let target_name = target.name.clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1868\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            let source_name = source_var.name.clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1877\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            });\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1878\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the outer pattern can be modified to include the inner pattern\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/decompiler.rs:1864:49\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1864\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    Operation::Assign { target, source } => {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mreplace this binding\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1865\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if let Expression::Variable(source_var) = source {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mwith this pattern, prefixed by `source`:\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to want to iterate on a map's values","code":{"code":"clippy::for_kv_map","explanation":null},"level":"warning","spans":[{"file_name":"src/core/lifter.rs","byte_start":1469,"byte_end":1501,"line_start":41,"line_end":41,"column_start":32,"column_end":64,"is_primary":true,"text":[{"text":"        for (_, definition) in &config.syscalls.custom_syscalls {","highlight_start":32,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use the corresponding method","code":null,"level":"help","spans":[{"file_name":"src/core/lifter.rs","byte_start":1450,"byte_end":1465,"line_start":41,"line_end":41,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        for (_, definition) in &config.syscalls.custom_syscalls {","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":"definition","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/lifter.rs","byte_start":1469,"byte_end":1501,"line_start":41,"line_end":41,"column_start":32,"column_end":64,"is_primary":true,"text":[{"text":"        for (_, definition) in &config.syscalls.custom_syscalls {","highlight_start":32,"highlight_end":64}],"label":null,"suggested_replacement":"config.syscalls.custom_syscalls.values()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to want to iterate on a map's values\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/lifter.rs:41:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (_, definition) in &config.syscalls.custom_syscalls {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the corresponding method\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        for \u001b[0m\u001b[0m\u001b[38;5;9m(_, definition)\u001b[0m\u001b[0m in \u001b[0m\u001b[0m\u001b[38;5;9m&config.syscalls.custom_syscalls\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        for \u001b[0m\u001b[0m\u001b[38;5;10mdefinition\u001b[0m\u001b[0m in \u001b[0m\u001b[0m\u001b[38;5;10mconfig.syscalls.custom_syscalls.values()\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `or_insert_with` to construct default value","code":{"code":"clippy::unwrap_or_default","explanation":null},"level":"warning","spans":[{"file_name":"src/core/lifter.rs","byte_start":15087,"byte_end":15111,"line_start":396,"line_end":396,"column_start":22,"column_end":46,"is_primary":true,"text":[{"text":"                    .or_insert_with(Vec::new)","highlight_start":22,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/core/lifter.rs","byte_start":15087,"byte_end":15111,"line_start":396,"line_end":396,"column_start":22,"column_end":46,"is_primary":true,"text":[{"text":"                    .or_insert_with(Vec::new)","highlight_start":22,"highlight_end":46}],"label":null,"suggested_replacement":"or_default()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `or_insert_with` to construct default value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/lifter.rs:396:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m396\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    .or_insert_with(Vec::new)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `or_default()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"stripping a prefix manually","code":{"code":"clippy::manual_strip","explanation":null},"level":"warning","spans":[{"file_name":"src/frontend/manifest_parser.rs","byte_start":26579,"byte_end":26589,"line_start":831,"line_end":831,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"            &hash[2..]","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the prefix was tested here","code":null,"level":"note","spans":[{"file_name":"src/frontend/manifest_parser.rs","byte_start":26539,"byte_end":26565,"line_start":830,"line_end":830,"column_start":24,"column_end":50,"is_primary":true,"text":[{"text":"        let hash_str = if hash.starts_with(\"0x\") {","highlight_start":24,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try using the `strip_prefix` method","code":null,"level":"help","spans":[{"file_name":"src/frontend/manifest_parser.rs","byte_start":26539,"byte_end":26565,"line_start":830,"line_end":830,"column_start":24,"column_end":50,"is_primary":true,"text":[{"text":"        let hash_str = if hash.starts_with(\"0x\") {","highlight_start":24,"highlight_end":50}],"label":null,"suggested_replacement":"if let Some(<stripped>) = hash.strip_prefix(\"0x\") ","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"src/frontend/manifest_parser.rs","byte_start":26579,"byte_end":26589,"line_start":831,"line_end":831,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"            &hash[2..]","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"<stripped>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: stripping a prefix manually\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/frontend/manifest_parser.rs:831:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m831\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            &hash[2..]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the prefix was tested here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/frontend/manifest_parser.rs:830:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m830\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let hash_str = if hash.starts_with(\"0x\") {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using the `strip_prefix` method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m830\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        let hash_str = \u001b[0m\u001b[0m\u001b[38;5;10mif let Some(<stripped>) = hash.strip_prefix(\"0x\") \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m831\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m<stripped>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `impl` can be derived","code":{"code":"clippy::derivable_impls","explanation":null},"level":"warning","spans":[{"file_name":"src/frontend/manifest_parser.rs","byte_start":28185,"byte_end":28336,"line_start":895,"line_end":902,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"impl Default for ContractFeatures {","highlight_start":1,"highlight_end":36},{"text":"    fn default() -> Self {","highlight_start":1,"highlight_end":27},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            storage: false,","highlight_start":1,"highlight_end":28},{"text":"            payable: false,","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace the manual implementation with a derive attribute","code":null,"level":"help","spans":[{"file_name":"src/frontend/manifest_parser.rs","byte_start":28185,"byte_end":28337,"line_start":895,"line_end":903,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl Default for ContractFeatures {","highlight_start":1,"highlight_end":36},{"text":"    fn default() -> Self {","highlight_start":1,"highlight_end":27},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            storage: false,","highlight_start":1,"highlight_end":28},{"text":"            payable: false,","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/frontend/manifest_parser.rs","byte_start":28045,"byte_end":28045,"line_start":888,"line_end":888,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct ContractFeatures {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Default)]\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `impl` can be derived\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/frontend/manifest_parser.rs:895:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m895\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Default for ContractFeatures {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m896\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn default() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m897\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            storage: false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m902\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: replace the manual implementation with a derive attribute\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m888\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ #[derive(Default)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m889\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0mpub struct ContractFeatures {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many arguments (8/7)","code":{"code":"clippy::too_many_arguments","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":12411,"byte_end":12666,"line_start":476,"line_end":485,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    fn handle_disasm(","highlight_start":5,"highlight_end":22},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        nef_file: &PathBuf,","highlight_start":1,"highlight_end":28},{"text":"        output: Option<&PathBuf>,","highlight_start":1,"highlight_end":34},{"text":"        offsets: bool,","highlight_start":1,"highlight_end":23},{"text":"        bytes: bool,","highlight_start":1,"highlight_end":21},{"text":"        operands: bool,","highlight_start":1,"highlight_end":24},{"text":"        comments: bool,","highlight_start":1,"highlight_end":24},{"text":"        stats: bool,","highlight_start":1,"highlight_end":21},{"text":"    ) -> Result<(), Box<dyn std::error::Error>> {","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many arguments (8/7)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:476:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m476\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn handle_disasm(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m478\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nef_file: &PathBuf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m479\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        output: Option<&PathBuf>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        stats: bool,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"useless use of `format!`","code":{"code":"clippy::useless_format","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":13321,"byte_end":13353,"line_start":503,"line_end":503,"column_start":31,"column_end":63,"is_primary":true,"text":[{"text":"            output_lines.push(format!(\"# NEF File Statistics\"));","highlight_start":31,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::useless_format)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `.to_string()`","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":13321,"byte_end":13353,"line_start":503,"line_end":503,"column_start":31,"column_end":63,"is_primary":true,"text":[{"text":"            output_lines.push(format!(\"# NEF File Statistics\"));","highlight_start":31,"highlight_end":63}],"label":null,"suggested_replacement":"\"# NEF File Statistics\".to_string()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: useless use of `format!`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:503:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m503\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            output_lines.push(format!(\"# NEF File Statistics\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using `.to_string()`: `\"# NEF File Statistics\".to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::useless_format)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"calling `push_str()` using a single-character string literal","code":{"code":"clippy::single_char_add_str","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":14700,"byte_end":14718,"line_start":536,"line_end":536,"column_start":17,"column_end":35,"is_primary":true,"text":[{"text":"                line.push_str(\" \");","highlight_start":17,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `push` with a character literal","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":14700,"byte_end":14718,"line_start":536,"line_end":536,"column_start":17,"column_end":35,"is_primary":true,"text":[{"text":"                line.push_str(\" \");","highlight_start":17,"highlight_end":35}],"label":null,"suggested_replacement":"line.push(' ')","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: calling `push_str()` using a single-character string literal\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:536:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m536\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                line.push_str(\" \");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using `push` with a character literal: `line.push(' ')`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many arguments (8/7)","code":{"code":"clippy::too_many_arguments","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":15602,"byte_end":15881,"line_start":569,"line_end":578,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    fn handle_cfg(","highlight_start":5,"highlight_end":19},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        nef_file: &PathBuf,","highlight_start":1,"highlight_end":28},{"text":"        output: Option<&PathBuf>,","highlight_start":1,"highlight_end":34},{"text":"        format: &GraphFormat,","highlight_start":1,"highlight_end":30},{"text":"        show_blocks: bool,","highlight_start":1,"highlight_end":27},{"text":"        show_instructions: bool,","highlight_start":1,"highlight_end":33},{"text":"        simplified: bool,","highlight_start":1,"highlight_end":26},{"text":"        analysis: bool,","highlight_start":1,"highlight_end":24},{"text":"    ) -> Result<(), Box<dyn std::error::Error>> {","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many arguments (8/7)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:569:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m569\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn handle_cfg(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m571\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nef_file: &PathBuf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m572\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        output: Option<&PathBuf>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        analysis: bool,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many arguments (11/7)","code":{"code":"clippy::too_many_arguments","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":18008,"byte_end":18389,"line_start":641,"line_end":653,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    fn handle_decompile(","highlight_start":5,"highlight_end":25},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        config: &DecompilerConfig,","highlight_start":1,"highlight_end":35},{"text":"        nef_file: &PathBuf,","highlight_start":1,"highlight_end":28},{"text":"        manifest: Option<&PathBuf>,","highlight_start":1,"highlight_end":36},{"text":"        output: Option<&PathBuf>,","highlight_start":1,"highlight_end":34},{"text":"        format: &PseudocodeFormat,","highlight_start":1,"highlight_end":35},{"text":"        optimization: u8,","highlight_start":1,"highlight_end":26},{"text":"        type_inference: bool,","highlight_start":1,"highlight_end":30},{"text":"        reports: bool,","highlight_start":1,"highlight_end":23},{"text":"        metrics: bool,","highlight_start":1,"highlight_end":23},{"text":"        multi_format: bool,","highlight_start":1,"highlight_end":28},{"text":"    ) -> Result<(), Box<dyn std::error::Error>> {","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many arguments (11/7)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:641:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn handle_decompile(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        config: &DecompilerConfig,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nef_file: &PathBuf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m652\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        multi_format: bool,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m653\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many arguments (12/7)","code":{"code":"clippy::too_many_arguments","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":21553,"byte_end":21953,"line_start":731,"line_end":744,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    fn handle_analyze(","highlight_start":5,"highlight_end":23},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        config: &DecompilerConfig,","highlight_start":1,"highlight_end":35},{"text":"        nef_file: &PathBuf,","highlight_start":1,"highlight_end":28},{"text":"        manifest: Option<&PathBuf>,","highlight_start":1,"highlight_end":36},{"text":"        output: Option<&PathBuf>,","highlight_start":1,"highlight_end":34},{"text":"        format: &AnalysisFormat,","highlight_start":1,"highlight_end":33},{"text":"        security: bool,","highlight_start":1,"highlight_end":24},{"text":"        nep_compliance: bool,","highlight_start":1,"highlight_end":30},{"text":"        performance: bool,","highlight_start":1,"highlight_end":27},{"text":"        quality: bool,","highlight_start":1,"highlight_end":23},{"text":"        all: bool,","highlight_start":1,"highlight_end":19},{"text":"        threshold: &Severity,","highlight_start":1,"highlight_end":30},{"text":"    ) -> Result<(), Box<dyn std::error::Error>> {","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many arguments (12/7)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:731:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn handle_analyze(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        config: &DecompilerConfig,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m734\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nef_file: &PathBuf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m743\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        threshold: &Severity,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m744\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"redundant closure","code":{"code":"clippy::redundant_closure","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":22158,"byte_end":22183,"line_start":750,"line_end":750,"column_start":42,"column_end":67,"is_primary":true,"text":[{"text":"        let manifest_json = manifest.map(|p| fs::read_to_string(p)).transpose()?;","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::redundant_closure)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace the closure with the function itself","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":22158,"byte_end":22183,"line_start":750,"line_end":750,"column_start":42,"column_end":67,"is_primary":true,"text":[{"text":"        let manifest_json = manifest.map(|p| fs::read_to_string(p)).transpose()?;","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":"fs::read_to_string","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant closure\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:750:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m750\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let manifest_json = manifest.map(|p| fs::read_to_string(p)).transpose()?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace the closure with the function itself: `fs::read_to_string`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::redundant_closure)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many arguments (9/7)","code":{"code":"clippy::too_many_arguments","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":24811,"byte_end":25102,"line_start":827,"line_end":837,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    fn handle_info(","highlight_start":5,"highlight_end":20},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        nef_file: &PathBuf,","highlight_start":1,"highlight_end":28},{"text":"        manifest: Option<&PathBuf>,","highlight_start":1,"highlight_end":36},{"text":"        format: &InfoFormat,","highlight_start":1,"highlight_end":29},{"text":"        metadata: bool,","highlight_start":1,"highlight_end":24},{"text":"        methods: bool,","highlight_start":1,"highlight_end":23},{"text":"        dependencies: bool,","highlight_start":1,"highlight_end":28},{"text":"        stats: bool,","highlight_start":1,"highlight_end":21},{"text":"        compiler: bool,","highlight_start":1,"highlight_end":24},{"text":"    ) -> Result<(), Box<dyn std::error::Error>> {","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many arguments (9/7)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:827:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m827\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn handle_info(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m828\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m829\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nef_file: &PathBuf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m830\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        manifest: Option<&PathBuf>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        compiler: bool,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"called `map(..).flatten()` on `Option`","code":{"code":"clippy::map_flatten","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":25438,"byte_end":25660,"line_start":847,"line_end":852,"column_start":14,"column_end":23,"is_primary":true,"text":[{"text":"            .map(|p| {","highlight_start":14,"highlight_end":23},{"text":"                let json_str = fs::read_to_string(p).ok()?;","highlight_start":1,"highlight_end":60},{"text":"                let manifest_parser = ManifestParser::new();","highlight_start":1,"highlight_end":61},{"text":"                manifest_parser.parse(&json_str).ok()","highlight_start":1,"highlight_end":54},{"text":"            })","highlight_start":1,"highlight_end":15},{"text":"            .flatten();","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::map_flatten)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try replacing `map` with `and_then` and remove the `.flatten()`","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":25438,"byte_end":25660,"line_start":847,"line_end":852,"column_start":14,"column_end":23,"is_primary":true,"text":[{"text":"            .map(|p| {","highlight_start":14,"highlight_end":23},{"text":"                let json_str = fs::read_to_string(p).ok()?;","highlight_start":1,"highlight_end":60},{"text":"                let manifest_parser = ManifestParser::new();","highlight_start":1,"highlight_end":61},{"text":"                manifest_parser.parse(&json_str).ok()","highlight_start":1,"highlight_end":54},{"text":"            })","highlight_start":1,"highlight_end":15},{"text":"            .flatten();","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":"and_then(|p| {\n                let json_str = fs::read_to_string(p).ok()?;\n                let manifest_parser = ManifestParser::new();\n                manifest_parser.parse(&json_str).ok()\n            })","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: called `map(..).flatten()` on `Option`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:847:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m847\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            .map(|p| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m ______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m848\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let json_str = fs::read_to_string(p).ok()?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m849\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let manifest_parser = ManifestParser::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m850\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                manifest_parser.parse(&json_str).ok()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m851\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m852\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .flatten();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::map_flatten)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try replacing `map` with `and_then` and remove the `.flatten()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m847\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            .\u001b[0m\u001b[0m\u001b[38;5;10mand_then(|p| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m848\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 let json_str = fs::read_to_string(p).ok()?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m849\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 let manifest_parser = ManifestParser::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m850\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 manifest_parser.parse(&json_str).ok()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m851\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~             })\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":29732,"byte_end":29914,"line_start":959,"line_end":963,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !force {","highlight_start":9,"highlight_end":20},{"text":"            if config_path.exists() || readme_path.exists() {","highlight_start":1,"highlight_end":62},{"text":"                return Err(\"Files already exist. Use --force to overwrite.\".into());","highlight_start":1,"highlight_end":85},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":29741,"byte_end":29743,"line_start":959,"line_end":959,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        if !force {","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cli.rs","byte_start":29904,"byte_end":29914,"line_start":962,"line_end":963,"column_start":14,"column_end":10,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cli.rs","byte_start":29756,"byte_end":29758,"line_start":960,"line_end":960,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"            if config_path.exists() || readme_path.exists() {","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"&&","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cli.rs","byte_start":29759,"byte_end":29759,"line_start":960,"line_end":960,"column_start":16,"column_end":16,"is_primary":true,"text":[{"text":"            if config_path.exists() || readme_path.exists() {","highlight_start":16,"highlight_end":16}],"label":null,"suggested_replacement":"(","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/cli.rs","byte_start":29759,"byte_end":29803,"line_start":960,"line_end":960,"column_start":16,"column_end":60,"is_primary":false,"text":[{"text":"            if config_path.exists() || readme_path.exists() {","highlight_start":16,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `if` or `while` condition","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/cli.rs","byte_start":29803,"byte_end":29803,"line_start":960,"line_end":960,"column_start":60,"column_end":60,"is_primary":true,"text":[{"text":"            if config_path.exists() || readme_path.exists() {","highlight_start":60,"highlight_end":60}],"label":null,"suggested_replacement":")","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/cli.rs","byte_start":29759,"byte_end":29803,"line_start":960,"line_end":960,"column_start":16,"column_end":60,"is_primary":false,"text":[{"text":"            if config_path.exists() || readme_path.exists() {","highlight_start":16,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `if` or `while` condition","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:959:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !force {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if config_path.exists() || readme_path.exists() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return Err(\"Files already exist. Use --force to overwrite.\".into());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m962\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m963\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        if !force\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m&&\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m(\u001b[0m\u001b[0mconfig_path.exists() || readme_path.exists()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 return Err(\"Files already exist. Use --force to overwrite.\".into());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m962\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"writing `&PathBuf` instead of `&Path` involves a new object where a slice will do","code":{"code":"clippy::ptr_arg","explanation":null},"level":"warning","spans":[{"file_name":"src/cli.rs","byte_start":32551,"byte_end":32559,"line_start":1050,"line_end":1050,"column_start":20,"column_end":28,"is_primary":true,"text":[{"text":"        base_path: &PathBuf,","highlight_start":20,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::ptr_arg)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/cli.rs","byte_start":32551,"byte_end":32559,"line_start":1050,"line_end":1050,"column_start":20,"column_end":28,"is_primary":true,"text":[{"text":"        base_path: &PathBuf,","highlight_start":20,"highlight_end":28}],"label":null,"suggested_replacement":"&Path","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cli.rs:1050:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1050\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        base_path: &PathBuf,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `&Path`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::ptr_arg)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error; 132 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error; 132 warnings emitted\u001b[0m\n\n"}
